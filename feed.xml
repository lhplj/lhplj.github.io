<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>lhplj</title>
    <link href="https://lhplj.github.io/feed.xml" rel="self" />
    <link href="https://lhplj.github.io" />
    <updated>2025-08-25T11:54:25+08:00</updated>
    <author>
        <name>lhplj</name>
    </author>
    <id>https://lhplj.github.io</id>

    <entry>
        <title>Vosk</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/vosk.html"/>
        <id>https://lhplj.github.io/vosk.html</id>

        <updated>2025-03-19T14:47:42+08:00</updated>
            <summary>
                <![CDATA[
                    转载自 https://blog.csdn.net/My_wife_QBL/article/details/136344578 Vosk是离线语音识别工具包。 &lt;dependency&gt; &lt;groupId&gt;org&lt;/groupId&gt; &lt;artifactId&gt;jaudiotagger&lt;/artifactId&gt; &lt;version&gt;2.0.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt; &lt;artifactId&gt;jna&lt;/artifactId&gt; &lt;version&gt;5.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alphacephei&lt;/groupId&gt; &lt;artifactId&gt;vosk&lt;/artifactId&gt; &lt;version&gt;0.3.32&lt;/version&gt; &lt;/dependency&gt; 代码示例 需要提前下载 https://alphacephei.com/vosk/models import java.io.File; import java.io.IOException; import java.io.InputStream; import javax.sound.sampled.AudioSystem; import javax.sound.sampled.UnsupportedAudioFileException; import org.openjdk.jol.info.ClassLayout; import org.vosk.LibVosk; import org.vosk.LogLevel; import org.vosk.Model; import org.vosk.Recognizer; public class Test {&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>转载自 <a href="https://blog.csdn.net/My_wife_QBL/article/details/136344578">https://blog.csdn.net/My_wife_QBL/article/details/136344578</a> </p>
<p><a href="https://alphacephei.com/vosk/index.zh">Vosk</a>是<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">离线语音识别工具包。</span></p>
<div>
<div>支持 WAV 格式的音频文件，建议使用 16kHz 单声道 PCM 编码的 WAV 文件。如果文件格式不同，可以考虑使用工具（如 <code>ffmpeg</code>）将其转换为兼容的格式。</div>
<h2>依赖</h2>
<div>
<pre class="language-html"><code>&lt;dependency&gt;
	&lt;groupId&gt;org&lt;/groupId&gt;
	&lt;artifactId&gt;jaudiotagger&lt;/artifactId&gt;
	&lt;version&gt;2.0.3&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
	&lt;groupId&gt;net.java.dev.jna&lt;/groupId&gt;
	&lt;artifactId&gt;jna&lt;/artifactId&gt;
	&lt;version&gt;5.7.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
	&lt;groupId&gt;com.alphacephei&lt;/groupId&gt;
	&lt;artifactId&gt;vosk&lt;/artifactId&gt;
	&lt;version&gt;0.3.32&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
</div>
<h2>代码示例</h2>
<p>需要提前下载 <a href="https://alphacephei.com/vosk/models">https://alphacephei.com/vosk/models</a> </p>
<div>
<pre class="language-java"><code>import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.UnsupportedAudioFileException;

import org.openjdk.jol.info.ClassLayout;
import org.vosk.LibVosk;
import org.vosk.LogLevel;
import org.vosk.Model;
import org.vosk.Recognizer;

public class Test {

    public static void main(String[] args) throws InterruptedException, IOException, UnsupportedAudioFileException {
        LibVosk.setLogLevel(LogLevel.DEBUG);
        // vosk model 路径
        String voskModelPath = "/path/to/vosk-model-small-cn-0.22";
        // 语音文件路径,必须是 wav 格式
        File voiceFile = new File("/path/to/test.wav");
        try (Model model = new Model(voskModelPath);
                InputStream is = AudioSystem.getAudioInputStream(voiceFile);
                Recognizer recognizer = new Recognizer(model, 16000.0f)) {
            int len;
            byte[] bytes = new byte[4096];
            while ((len = is.read(bytes)) &gt;= 0) {
                recognizer.acceptWaveForm(bytes, len);
            }
            // 语音转文字结果
            System.out.println(recognizer.getFinalResult());
        }
    }
}</code></pre>
<h2>ffmpeg</h2>
<pre class="language-bash"><code>ffmpeg -i input.m4a -ar 16000 -ac 1 -f wav output.wav</code></pre>
<h3>解释：</h3>
<ul>
<li><code>-i input.m4a</code>：指定输入文件为 <code>input.m4a</code>（将其替换为你实际的文件名）。</li>
<li><code>-ar 16000</code>：设置音频的采样率为 16kHz（16000 Hz）。</li>
<li><code>-ac 1</code>：将音频转换为单声道（1 个声道）。</li>
<li><code>-f wav</code>：指定输出格式为 <code>.wav</code>。</li>
<li><code>output.wav</code>：指定输出的文件名为 <code>output.wav</code>（你可以修改为你想要的文件名）。</li>
</ul>
</div>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java Synchronized 锁种类及升级</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/java-synchronized-suo-zhong-lei-ji-sheng-ji.html"/>
        <id>https://lhplj.github.io/java-synchronized-suo-zhong-lei-ji-sheng-ji.html</id>

        <updated>2025-02-07T16:47:47+08:00</updated>
            <summary>
                <![CDATA[
                    种类 无锁 偏向锁 存储的是偏向的线程ID 单线程竞争:当线程A第一次竞争到锁时,通过操作修改Mark Word中的偏向线程ID,偏向模式.如果不存在其它线程竞争,那么持有偏向锁的线程将永远不需要进行同步. 在锁第一次被拥有的时候,记录下偏向线程ID.这样偏向线程就一直持有着锁(后续这个线程进入和退出这段加了同步锁的代码块时,不需要再次加锁和释放锁.而是直接去检查锁的MardWord里面存储的是不是自己线程的ID) 如果是:表示偏向锁是偏向于当前线程的,就不需要再尝试获得锁了,直到竞争发生才释放锁.以后每次同步,检查锁的偏向线程ID与当前线程是否一致,如果一致则直接进入同步.无需每次加锁解锁都去CAS更新对象头.如果自始至终使用锁的线程只有一个,很明显偏向锁几乎没有额外开销,性能很高 如果不是:表示发生了竞争,锁已经不是总是偏向于同一个线程了,这个时值会尝试使用CAS来替换MarkWord里面的线程ID为新线程ID. 竞争成功:表示之前的线程不存在的,MarkWord里面的线程ID为新线程的ID,锁不会升级,仍然为偏向锁 竞争失败:这时候可能需要升级为轻量级锁,才能保证线程间公平竞争锁 注意:偏向锁只有遇到其它线程尝试竞争偏向锁时,持有偏向锁的线程才会释放锁,线程是不会主动释放偏向锁的. JVM启动时默认会在4秒后才启用偏向锁,可通过参数-XX:BiasedLockingStartupDelay=0来指定立即生效 JDK15开始废弃了偏向锁 存储的是指向线程栈中Lock Record的指针 多线程竞争,但是任意时刻只有一个线程竞争,即不存在竞争太过激烈的情况,也就没有线程阻塞. 轻量级锁是为了在线程近乎交替执行同步块时提高性能. 主要目的:在没有多线程竞争的前提下,通过CAS减少重量级锁使用系统互斥量产生的性能消耗,就是先自旋,不行才升级阻塞. 升级时机:当关闭偏向锁功能或多线程竞争偏向锁会导致偏向锁升级为轻量级锁 轻量级锁的加锁:JVM为为每个线程在当前线程的栈帧中创建用于存储锁记录的空间,官方称为Displaced Mark Word.若一个线程获得锁时发现是轻量级锁,会把锁的MarkWord复制到自己的Dispalced Mard Word里面.然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的指针.如果成功,则获取锁.如果失败,表示MarkWord已经被替换成了其他线程的锁记录,说明在与其它线程竞争锁,当前线程就尝试使用自旋来获取锁. 自旋CAS: CAS失败达到一定次数后,轻量级锁会升级为重量级锁 轻量级锁的释放:在释放锁时,当前线程会使用CAS操作将Displaced Mark Word的内容复制回锁的Mark Word里面.如果没有发生竞争,那么这个复制操作会成功.如果有别的线程因为自旋多次导致轻量级锁升级成了重量级锁,那么CAS操作会失败,此时会释放锁并唤醒被阻塞的线程 存储的是指向堆中的 monitor 对象的指针。每个java对象内部都有一个ObjectMonitor。它是C++开发的ObjectMonitor.hpp实现,依赖于底层操作系统的Mutex Lock(系统互斥锁)来实现. 挂起线程和恢复线程都需要转入内核态去完成,阻塞或唤醒一个java线程需要操作系统切换CPU状态来完成,这种状态切换需要耗费处理器时间,成本非常高 无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1>种类</h1>
<ul>
<li>无锁</li>
<li>偏向锁</li>
</ul>
<p>存储的是偏向的线程ID<br>单线程竞争:当线程A第一次竞争到锁时,通过操作修改Mark Word中的偏向线程ID,偏向模式.如果不存在其它线程竞争,那么持有偏向锁的线程将永远不需要进行同步.<br>在锁第一次被拥有的时候,记录下偏向线程ID.这样偏向线程就一直持有着锁(后续这个线程进入和退出这段加了同步锁的代码块时,不需要再次加锁和释放锁.而是直接去检查锁的MardWord里面存储的是不是自己线程的ID)<br><strong>如果是</strong>:表示偏向锁是偏向于当前线程的,就不需要再尝试获得锁了,直到竞争发生才释放锁.以后每次同步,检查锁的偏向线程ID与当前线程是否一致,如果一致则直接进入同步.无需每次加锁解锁都去CAS更新对象头.如果自始至终使用锁的线程只有一个,很明显偏向锁几乎没有额外开销,性能很高<br><strong>如果不是</strong>:表示发生了竞争,锁已经不是总是偏向于同一个线程了,这个时值会尝试使用CAS来替换MarkWord里面的线程ID为新线程ID.<br><strong>竞争成功</strong>:表示之前的线程不存在的,MarkWord里面的线程ID为新线程的ID,锁不会升级,仍然为偏向锁<br><strong>竞争失败</strong>:这时候可能需要升级为轻量级锁,才能保证线程间公平竞争锁<br><strong>注意</strong>:偏向锁只有遇到其它线程尝试竞争偏向锁时,持有偏向锁的线程才会释放锁,线程是不会主动释放偏向锁的.<br>JVM启动时默认会在4秒后才启用偏向锁,可通过参数-XX:BiasedLockingStartupDelay=0来指定立即生效<br><strong>JDK15开始废弃了偏向锁</strong></p>
<ul>
<li>轻量级锁</li>
</ul>
<p>存储的是指向线程栈中Lock Record的指针<br>多线程竞争,但是任意时刻只有一个线程竞争,即不存在竞争太过激烈的情况,也就没有线程阻塞.<br>轻量级锁是为了在线程近乎交替执行同步块时提高性能.<br>主要目的:在没有多线程竞争的前提下,通过CAS减少重量级锁使用系统互斥量产生的性能消耗,就是先自旋,不行才升级阻塞.<br>升级时机:当关闭偏向锁功能或多线程竞争偏向锁会导致偏向锁升级为轻量级锁<br><strong>轻量级锁的加锁</strong>:JVM为为每个线程在当前线程的栈帧中创建用于存储锁记录的空间,官方称为Displaced Mark Word.若一个线程获得锁时发现是轻量级锁,会把锁的MarkWord复制到自己的Dispalced Mard Word里面.然后线程尝试用CAS将锁的MarkWord替换为指向锁记录的指针.如果成功,则获取锁.如果失败,表示MarkWord已经被替换成了其他线程的锁记录,说明在与其它线程竞争锁,当前线程就尝试使用自旋来获取锁.<br><strong>自旋CAS</strong>: CAS失败达到一定次数后,轻量级锁会升级为重量级锁<br><strong>轻量级锁的释放</strong>:在释放锁时,当前线程会使用CAS操作将Displaced Mark Word的内容复制回锁的Mark Word里面.如果没有发生竞争,那么这个复制操作会成功.如果有别的线程因为自旋多次导致轻量级锁升级成了重量级锁,那么CAS操作会失败,此时会释放锁并唤醒被阻塞的线程</p>
<ul>
<li>重量级锁 </li>
</ul>
<p>存储的是指向堆中的 monitor 对象的指针。每个java对象内部都有一个ObjectMonitor。它是C++开发的ObjectMonitor.hpp实现,依赖于底层操作系统的Mutex Lock(系统互斥锁)来实现.<br>挂起线程和恢复线程都需要转入内核态去完成,阻塞或唤醒一个java线程需要操作系统切换CPU状态来完成,这种状态切换需要耗费处理器时间,成本非常高</p>
<ul>
<li style="list-style-type: none;">
<ul>
<li>ObjectMonitor<br>
<ul>
<li>_owner 锁定当前对象的线程ID</li>
<li>_count 初始值是0,表示当前锁对象是否被锁定;每次执行加锁操作+1,每次执行解锁操作-1</li>
<li>_recursions 初始值是0,表示同步代码块的重入次数;同步代码每进入一层+1,同步代码每出来一层-1</li>
<li>_EntryList 阻塞队列,存储阻塞的线程</li>
<li>_WaitSet 等待队列,存储等待的线程</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>升级过程</h1>
<p>无锁 -&gt; 偏向锁 -&gt; 轻量级锁 -&gt; 重量级锁</p>
<figure class="post__image post__image--center"><img loading="lazy"  src="https://lhplj.github.io/media/posts/17/java-object-mark-word-2.png" alt="" width="2904" height="1198" sizes="100vw" srcset="https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-xs.png 300w ,https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-sm.png 480w ,https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-md.png 768w ,https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-lg.png 1024w ,https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-xl.png 1360w ,https://lhplj.github.io/media/posts/17/responsive/java-object-mark-word-2-2xl.png 1600w"></figure>
<figure class="post__image"><img loading="lazy"  src="https://lhplj.github.io/media/posts/17/java-synchronized-process-2-2.png" alt="" width="3485" height="1728" sizes="100vw" srcset="https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-xs.png 300w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-sm.png 480w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-md.png 768w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-lg.png 1024w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-xl.png 1360w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-process-2-2-2xl.png 1600w"></figure>
<figure class="post__image"><img loading="lazy"  src="https://lhplj.github.io/media/posts/17/java-synchronized-lock-update.jpeg" alt="" width="640" height="1276" sizes="100vw" srcset="https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-xs.jpeg 300w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-sm.jpeg 480w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-md.jpeg 768w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-lg.jpeg 1024w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-xl.jpeg 1360w ,https://lhplj.github.io/media/posts/17/responsive/java-synchronized-lock-update-2xl.jpeg 1600w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java引用</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/javayin-yong.html"/>
        <id>https://lhplj.github.io/javayin-yong.html</id>

        <updated>2025-02-07T11:02:41+08:00</updated>
            <summary>
                <![CDATA[
                    强引用（默认支持模式java.lang.ref.Reference&lt;T&gt;） 软引用（java.lang.ref.SoftReference&lt;T&gt;） 弱引用（java.lang.ref.WeakReference&lt;T&gt;） 虚引用（java.lang.ref.PhantomReference&lt;T&gt;） Object.finalize() 当GC认为可以回收某对象时，GC会调用对象的此方法 当内存不足JVM开始垃圾回收，对于强引用对象，只要引用计数大于0就不会回收该对象。 SomeObject so = new SomeObject(); # 通过构造方法软引用一个对象 SoftReference&lt;SomeObject&gt; sf = new SoftReference(so); # 通过get方法获取引用对象 # 在内存充足时可以正常获取到引用䭴 # 在内存不足时将获取null，so会被GC机制回收 SomeObject ref = sf.get(); 弱引用 比软引用的生存期更短，只要进行GC无论JVM内存是否充足，弱引用对象都会被清理 # ThreadLocal 中的静态类 ThreadLocalMap 中的 静态类 Entry 继承了弱引用 static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ul>
<li>强引用（默认支持模式java.lang.ref.Reference&lt;T&gt;）</li>
<li>软引用（java.lang.ref.SoftReference&lt;T&gt;）</li>
<li>弱引用（java.lang.ref.WeakReference&lt;T&gt;）</li>
<li>虚引用（java.lang.ref.PhantomReference&lt;T&gt;）</li>
</ul>
<h2>Object.finalize()</h2>
<p>当GC认为可以回收某对象时，GC会调用对象的此方法</p>
<h2>强引用</h2>
<p>当内存不足JVM开始垃圾回收，对于强引用对象，只要引用计数大于0就不会回收该对象。</p>
<h2>软引用</h2>
<ul>
<li>当系统内存充足时软引用对象不会被回收</li>
<li>当系统内存不足时软引用对象会被回收</li>
</ul>
<pre class="language-java"><code>SomeObject so = new SomeObject();
# 通过构造方法软引用一个对象
SoftReference&lt;SomeObject&gt; sf = new SoftReference(so);
# 通过get方法获取引用对象
# 在内存充足时可以正常获取到引用䭴
# 在内存不足时将获取null，so会被GC机制回收
SomeObject ref = sf.get();</code></pre>
<h2>弱引用</h2>
<p>比软引用的生存期更短，只要进行GC无论JVM内存是否充足，弱引用对象都会被清理</p>
<pre class="language-java"><code># ThreadLocal 中的静态类 ThreadLocalMap 中的 静态类 Entry 继承了弱引用
static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {
    /** The value associated with this ThreadLocal. */
    Object value;

    Entry(ThreadLocal&lt;?&gt; k, Object v) {
        super(k);
        value = v;
    }
}</code></pre>
<h3>ThreadLocal.ThreadLocalMap.Entry为什么要用弱引用</h3>
<p>因为它在TheadLocal内部，本身引用的对象又是ThreadLocal，也就是说在内部引用自己，如果使用强引用，那ThreadLocal对象将永远无法被回收。</p>
<p>由于是弱引用，所以ThreadLocal对象会在GC后被回收，引用它的变量将成为null，所以它的 set / get 方法会在内部判断引用对象是否为 null ，如果是，将会自动清理保存的数据，以释放内存。</p>
<h2>虚引用</h2>
<p>在任何时间都可能被回收</p>
<ol>
<li>虚引用必须与引用队列（java.lang.ref.ReferenceQueue&lt;T&gt;）联合使用。<span style="color: #e03e2d;"><strong>虚引用对象被回收后，会被加入到 ReferenceQueue 中</strong></span></li>
<li>虚引用的get方法总是返回null：虚引用的主要作用是跟踪对象被垃圾回收的状态。仅仅是提供了一种确保对象被 finalize 以后，做某些事情的通知机制。</li>
<li>处理监控通知使用：换句话说，设置虚引用关联对象的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步的处理，用来实现 比finalize 机制更灵活的回收操作。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring+Nacos加载配置流程</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html"/>
        <id>https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html</id>

        <updated>2024-10-24T08:54:29+08:00</updated>
            <summary>
                <![CDATA[
                    org.springframework.boot.SpringApplication public ConfigurableApplicationContext run(String... args) { ... ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); ... } private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments) { ... listeners.environmentPrepared(environment); .. } org.springframework.boot.SpringApplicationRunListeners void environmentPrepared(ConfigurableEnvironment environment) { for (SpringApplicationRunListener listener : this.listeners) { listener.environmentPrepared(environment); } } org.springframework.boot.SpringApplicationRunListener default void environmentPrepared(ConfigurableEnvironment environment) {}&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ol>
<li>org.springframework.boot.SpringApplication
<pre class="language-java"><code>public ConfigurableApplicationContext run(String... args) {
    ...
    ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
    ...
}

private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,
        ApplicationArguments applicationArguments) {
    ...
    listeners.environmentPrepared(environment);
    ..
}</code></pre>
</li>
<li>org.springframework.boot.SpringApplicationRunListeners
<pre class="language-java"><code>void environmentPrepared(ConfigurableEnvironment environment) {
    for (SpringApplicationRunListener listener : this.listeners) {
        listener.environmentPrepared(environment);
    }
}</code></pre>
</li>
<li>org.springframework.boot.SpringApplicationRunListener
<pre class="language-java"><code>default void environmentPrepared(ConfigurableEnvironment environment) {}</code></pre>
</li>
<li>org.springframework.boot.context.event.EventPublishingRunListener
<pre class="language-java"><code>@Override
public void environmentPrepared(ConfigurableEnvironment environment) {
    this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(this.application, this.args, environment));
}</code></pre>
</li>
<li>org.springframework.context.event.SimpleApplicationEventMulticaster
<pre class="language-java"><code>@Override
public void multicastEvent(ApplicationEvent event) {
	multicastEvent(event, resolveDefaultEventType(event));
}

@Override
public void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) {
	...
	invokeListener(listener, event);
	...
}

/**
 * Invoke the given listener with the given event.
 * @param listener the ApplicationListener to invoke
 * @param event the current event to propagate
 * @since 4.1
 */
protected void invokeListener(ApplicationListener&lt;?&gt; listener, ApplicationEvent event) {
	...
	doInvokeListener(listener, event);
	...
}

@SuppressWarnings({"rawtypes", "unchecked"})
private void doInvokeListener(ApplicationListener listener, ApplicationEvent event) {
	...
	listener.onApplicationEvent(event);
	...
}</code></pre>
</li>
<li>org.springframework.cloud.bootstrap.BootstrapApplicationListener
<pre class="language-java"><code>@Override
public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {
   ...
}</code></pre>
</li>
</ol>
<p>以上是SpringBoot启动时加载Spring自身相关Environment的主要流程,之后通过<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ApplicationEnvironmentPreparedEvent事件监听器加载所有的</span></p>
<div>
<div>
<div>ApplicationContextInitializer来保存Environment.接下来就可以对Environment进行扩展/调整/覆盖等一系列操作.</div>
</div>
</div>
<ol style="list-style-type: lower-roman;">
<li>org.springframework.cloud.bootstrap.BootstrapImportSelectorConfiguration</li>
<li>org.springframework.cloud.bootstrap.BootstrapImportSelector</li>
<li>org.springframework.cloud.bootstrap.BootstrapConfiguration
<ol style="list-style-type: lower-alpha;">
<li>spring-cloud-context.jar/META-INF/spring.factories  PropertySourceBootstrapConfiguration</li>
<li>spring-cloud-starter-alibaba-nacos-config.jar/META-INF/spring.factories -&gt; NacosConfigBootstrapConfiguration -&gt; NacosPropertySourceLocator</li>
</ol>
</li>
<li>org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration<br>会加载所有PropertySourceLocator并执行locateCollection方法,进而执行locate方法.当然就包括下边的NacosPropertySourceLocator</li>
<li>com.alibaba.cloud.nacos.client.NacosPropertySourceLocator<br>主要依赖com.alibaba.cloud.nacos.NacosConfigManager中的com.alibaba.nacos.api.config.ConfigService构造出com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder</li>
<li>com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder
<pre class="language-java"><code>/*
 * Copyright 2013-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alibaba.cloud.nacos.client;

import java.util.Collections;
import java.util.Date;
import java.util.List;

import com.alibaba.cloud.nacos.NacosPropertySourceRepository;
import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
import com.alibaba.nacos.api.config.ConfigService;
import com.alibaba.nacos.api.exception.NacosException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.core.env.PropertySource;
import org.springframework.util.StringUtils;

/**
 * @author xiaojing
 * @author pbting
 */
public class NacosPropertySourceBuilder {

	private static final Logger log = LoggerFactory
			.getLogger(NacosPropertySourceBuilder.class);

	private ConfigService configService;

	private long timeout;

	public NacosPropertySourceBuilder(ConfigService configService, long timeout) {
		this.configService = configService;
		this.timeout = timeout;
	}

	public long getTimeout() {
		return timeout;
	}

	public void setTimeout(long timeout) {
		this.timeout = timeout;
	}

	public ConfigService getConfigService() {
		return configService;
	}

	public void setConfigService(ConfigService configService) {
		this.configService = configService;
	}

	/**
	 * @param dataId Nacos dataId
	 * @param group Nacos group
	 */
	NacosPropertySource build(String dataId, String group, String fileExtension,
			boolean isRefreshable) {
		List&lt;PropertySource&lt;?&gt;&gt; propertySources = loadNacosData(dataId, group,
				fileExtension);
		NacosPropertySource nacosPropertySource = new NacosPropertySource(propertySources,
				group, dataId, new Date(), isRefreshable);
		NacosPropertySourceRepository.collectNacosPropertySource(nacosPropertySource);
		return nacosPropertySource;
	}

	private List&lt;PropertySource&lt;?&gt;&gt; loadNacosData(String dataId, String group,
			String fileExtension) {
		String data = null;
		try {
			data = configService.getConfig(dataId, group, timeout);
			if (StringUtils.isEmpty(data)) {
				log.warn(
						"Ignore the empty nacos configuration and get it based on dataId[{}] &amp; group[{}]",
						dataId, group);
				return Collections.emptyList();
			}
			if (log.isDebugEnabled()) {
				log.debug(String.format(
						"Loading nacos data, dataId: '%s', group: '%s', data: %s", dataId,
						group, data));
			}
			return NacosDataParserHandler.getInstance().parseNacosData(dataId, data,
					fileExtension);
		}
		catch (NacosException e) {
			log.error("get data from Nacos error,dataId:{} ", dataId, e);
		}
		catch (Exception e) {
			log.error("parse data from Nacos error,dataId:{},data:{}", dataId, data, e);
		}
		return Collections.emptyList();
	}

}
</code></pre>
</li>
</ol>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java-Case0</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/java.html"/>
        <id>https://lhplj.github.io/java.html</id>

        <updated>2024-08-27T14:48:45+08:00</updated>
            <summary>
                <![CDATA[
                    public class Test { public static void main(String[] args) { Father f = new Son(); System.out.println(f.x); System.out.println(((Son)f).x); f.print(); } } class Father { int x = 10; public Father() { System.out.println(&quot;Construct Father.x = &quot; + x); print(); x = 20; System.out.println(&quot;Construct Father.x = &quot; +&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code class="language-java">public class Test {

    public static void main(String[] args) {
        Father f = new Son();
        System.out.println(f.x);
        System.out.println(((Son)f).x);
        f.print();
    }

}

class Father {
    int x = 10;

    public Father() {
        System.out.println(&quot;Construct Father.x = &quot; + x);
        print();
        x = 20;
        System.out.println(&quot;Construct Father.x = &quot; + x);
    }

    public void print() {
        System.out.println(&quot;print Father.x = &quot; + x);
    }
}

class Son extends Father {
    int x = 30;

    public Son() {
        System.out.println(&quot;Construct Son.x = &quot; + x);
        print();
                super.print();
        x = 40;
        System.out.println(&quot;Construct Son.x = &quot; + x);
    }

    @Override
    public void print() {
        System.out.println(&quot;print Son.x = &quot; + x);
    }
}
</code></pre>
<pre><code>输出结果:
Construct Father.x = 10
print Son.x = 0
Construct Father.x = 20
Construct Son.x = 30
print Son.x = 30
print Father.x = 20
Construct Son.x = 40
20
40
print Son.x = 40
</code></pre>
<ul>
<li>子类实例化时会先实例化父类,因为会先执行父类的构造方法</li>
<li>子类重写了父类的print方法,所以父类构造方法中的print会执行子类的print,但此时子类尚未完成实例化,属性未初始化,所以为0</li>
<li>属性的取值取决于所属类,而非对象</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>JVM</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/jvm.html"/>
        <id>https://lhplj.github.io/jvm.html</id>

        <updated>2024-08-27T10:42:08+08:00</updated>
            <summary>
                <![CDATA[
                    内存参数 -Xms 堆内存初始大小(等同于 -XX:InitialHeapSize ) -Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize ) -Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置) -Xss 线程栈大小 -XX:NewSize 初始新生代大小 -XX:MaxNewSize 最大新生代大小 -XX:InitialHeapSize 初始堆大小 -XX:MaxHeapSize 最大堆大小 -XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置 -XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置 -XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1 -XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15（最大也是15）。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。 -XX:TargetSurvivorRatio&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="内存参数">内存参数</h3>
<pre><code>-Xms 堆内存初始大小(等同于 -XX:InitialHeapSize )
-Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize )
-Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置)
-Xss 线程栈大小
-XX:NewSize 初始新生代大小
-XX:MaxNewSize 最大新生代大小
-XX:InitialHeapSize 初始堆大小
-XX:MaxHeapSize 最大堆大小
-XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置
-XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置
-XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1
-XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15（最大也是15）。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。
-XX:TargetSurvivorRatio 设定survivor区的目标使用率。默认50，即survivor区对象目标使用率为50%。

-XX:+HeapDumpOnOutOfMemoryError 内存溢出时输出堆内存文件
-XX:HeapDumpPath=/path/to/heap.hprof 堆内存文件路径(可通过 $JAVA_HOME/bin/jvisualvm 分析hprof文件）
-XX:PrintCommandLineFlags 输出JVM所有的参数
</code></pre>
<p>一般-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 设置一样的大小, -Xms 和 -Xmx 设置一样的大小，这意味着堆内存的大小在整个程序运行期间不会发生变化,
这种配置有几个影响：</p><ol>
<li>减少垃圾回收的频率：当堆的大小固定时，垃圾回收（GC）可以更容易地进行优化，因为它只需要处理固定大小的内存。如果堆大小变动，JVM 需要管理堆的调整，这可能会影响 GC 的效率。</li>
<li>避免动态调整带来的性能损失：固定堆大小可以避免在运行过程中动态调整堆内存大小带来的性能开销。这通常会减少垃圾回收时的停顿时间，因为堆的大小不会因应用负载的变化而波动。</li>
<li>潜在的内存不足问题：如果应用程序的内存需求超出了设置的 -Xmx 值，那么固定堆大小并不能防止 OutOfMemoryError 错误。你需要确保 -Xmx 设置的值足够大，以满足应用程序的内存需求。</li>
<li>GC 调优：虽然固定堆大小可以减少 GC 的频率和复杂性，但 GC 的具体行为还取决于所使用的 GC 算法和其他 JVM 参数。你可能仍然需要根据应用程序的需求进行 GC 参数的调优。
总结来说，将 -Xms 和 -Xmx 设置为相同的值可以帮助减少由于堆内存调整引起的性能问题，但并不能完全避免垃圾回收。GC 的发生仍然取决于应用程序的内存使用模式和所选择的垃圾回收算法。</li>
</ol>
<h3 id="gc参数">GC参数</h3>
<pre><code>-XX:+PrintGCDetails 输出详细的 GC 信息。
-XX:+PrintGCDateStamps 在 GC 日志中添加时间戳。
-XX:+UseGCLogFileRotation GC日志分割
-Xloggc:/path/to/gc.log 指定 GC 日志文件的路径。
-XX:+UseG1GC 使用 G1 垃圾回收器。
-XX:+UseParallelGC 使用并行垃圾回收器。
-XX:+UseConcMarkSweepGC 使用 CMS 垃圾回收器（注意，CMS 从 JDK 14 开始已被弃用）。
</code></pre>
<h4 id="full-gc">Full GC</h4>
<p>Full GC是指对整个堆内存（包括新生代和老年代）以及元空间进行垃圾回收的过程。Full GC通常比Minor GC（只针对新生代进行垃圾回收）要耗时更长，并且会导致所有用户线程暂停（Stop The World），因此应该尽量避免或减少Full GC的发生。
一般情况下，只需要看Full GC的总次数和执行的间隔时间。一般Full GC间隔时间在13分钟以上，都属于正常的。一旦低于1分钟，就说明堆栈内存严重不足，需要调整了.</p><h4 id="注意事项">注意事项</h4>
<ul>
<li>确保指定的日志文件路径对 JVM 进程有写权限。</li>
<li>GC 日志文件可能会很大，所以需要定期检查和管理这些文件。
启用 GC 日志后，你可以分析 GC 活动，以了解内存使用情况和性能瓶颈。可以使用一些工具来分析这些日志，比如 GCViewer 或 GCEasy。</li>
</ul>
<h3 id="查看jvm参数">查看JVM参数</h3>
<pre><code># 通过jps 查验java 进程及pid
jps -l
# jinfo pid 可以查看JVM进程所有的属性设置和配置参数(63936 为进程ID)
jinfo 63936
# 通过jmap查看 JVM 的堆的配置信息(63936 为进程ID)
jmap -heap 63936
</code></pre>
<h3 id="jvm内存结构">JVM内存结构</h3>
<ul>
<li>Heap(-Xms -Xmx)(Full GC)<ul>
<li>Young新生代(-Xmn 默认Heap的1/3 )(Minor GC)<ul>
<li>Eden伊甸园区(默认Young的8/10)</li>
<li>Survivor0(From)幸存者0区(默认Young的1/10)</li>
<li>Survivor1(To)幸存者1区(默认Young的1/10)</li>
</ul>
</li>
<li>Old老年代(默认Heap的2/3)(Major GC)</li>
</ul>
</li>
<li>Perm(JDK7永久区 -XX:PermSize JDK8元空间)<ul>
<li>JDK7永久区(-XX:PermSize -XX:MaxPermSize)</li>
<li>JDK8元空间(-XX:MetaspaceSize -XX:MaxMetaspaceSize)</li>
</ul>
</li>
</ul>
<h3 id="gc算法">GC算法</h3>
<ul>
<li>引用计数<br>  对于互相引用的情况无法进行内存清理</li>
<li>内存复制<br>  新生代 Eden 区到 Survivor 区用的是内存复制.From与To空间一样,且身份不固定,每次必有一个是空的,GC时谁空谁就是To,直接把From及Eden中未回收的放到To中,之后角色互换.
  每经历一次YGC幸存者年龄加1,年龄达到15后,会被移到Old区<ul>
<li>优点:内存连续</li>
<li>缺点:耗费内存</li>
</ul>
</li>
<li>标记清除<br>  老年代使用的算法.<ul>
<li>优点:节约内存</li>
<li>缺点:存在内存碎片</li>
</ul>
</li>
<li>标记覆盖<br>  老年代使用的算法.</li>
</ul>
<h3 id="对象在堆内存中的存储布局">对象在堆内存中的存储布局</h3>
<ul>
<li>对象头<ul>
<li>对象标记（Mark Word）（64位系统中占8字节）<ul>
<li>hash code</li>
<li>GC标记</li>
<li>GC次数</li>
<li>同步锁标记</li>
<li>偏向锁持有者</li>
</ul>
</li>
<li>类型指针（Class Pointer）（64位系统中占8字节）</li>
<li>Length (数组特有，一般对象无）</li>
</ul>
</li>
<li>实例数据</li>
<li>对齐填充（保证8个字节的倍数）</li>
</ul>
<figure class="post__image"><img loading="lazy" src="https://lhplj.github.io/media/posts/11/java-object-mark-word-2.png" alt="Mark Word" width="2234" height="700"  sizes="100vw" srcset="https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-xs.png 300w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-sm.png 480w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-md.png 768w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-lg.png 1024w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-xl.png 1360w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-2xl.png 1600w"></figure><h3 id="jol">JOL</h3>
<p>org.openjdk.jol 可以用于分析Java对象结构</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>linux常用命令</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/top.html"/>
        <id>https://lhplj.github.io/top.html</id>

        <updated>2024-08-27T10:36:20+08:00</updated>
            <summary>
                <![CDATA[
                    top 显示 swap 执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小 top -o &lt;列名&gt; # 按SWSP排序 top -o SWAP # 按CPU使用率排序 top -o %CPU lsof # lsof -i:端口号 查询端口号是否被占用 lsof -i:26379 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME redis-ser 24071 root 6u IPv4 125225 0t0 TCP *:26379 (LISTEN) pwdx #&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1>top</h1>
<h2>显示 swap </h2>
<p>执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小</p>
<h2>排序</h2>
<pre class="language-bash"><code>top -o &lt;列名&gt;
# 按SWSP排序
top -o SWAP
# 按CPU使用率排序
top -o %CPU</code></pre>
<h1>lsof</h1>
<pre class="language-bash"><code># lsof -i:端口号 查询端口号是否被占用
lsof -i:26379
COMMAND      PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME
redis-ser  24071 root    6u  IPv4    125225      0t0  TCP *:26379 (LISTEN)
</code></pre>
<h1>pwdx</h1>
<pre class="language-bash"><code># pwdx pid 查看进程启动时的工作目录
pwdx 24071
24071: /home/devops/install/redis-cluster/redis_26379</code></pre>
<h1>ps</h1>
<pre class="language-bash"><code># 查看进程的运行时间
# 例如 10-01:23:45 表示进程已运行了 10 天、1 小时、23 分钟和 45 秒。
ps -p &lt;PID&gt; -o etime</code></pre>
<h1>zip</h1>
<pre class="language-bash"><code># name 为生成的压缩包的名称
# q 静默
# r 递归子目录
zip -qr name.zip ./*

# 对于jar包解压后再压缩，要增加选项0，否则会对依赖jar进行压缩，这样java将无法正常解析
# 0 只存储不压缩
zip -qr0 name.zip ./*</code></pre>
<h1><a href="https://www.runoob.com/linux/linux-comm-awk.html" title="awk" target="_blank" rel="noopener noreferrer">awk</a></h1>
<pre class="language-bash"><code>awk options 'pattern {action}' file
# options
# -F &lt;分隔符&gt; 或 --field-separator=&lt;分割符&gt; 默认空格，可以指定多个，如 awk -F '[ ,]' 先使用空格分割，再使用逗号分割
# -v &lt;变量名&gt;=&lt;值&gt; 设置awk内部的变量，可以使用该选项将外部值传递给awk脚本中的变量
# -f &lt;脚本文件&gt;
# -V 或 --version
# -h 或 --help

# 打印整行
awk {print} file
# 查看日志文件中包含指定关键字，且第9项数值大于1000的行打印出来
cat gateservice-info.log | grep "Controller.p" | awk '$9&gt;1000 {print $0}'
# 打印特定列
awk '{print $1, $2}' file
# 使用分隔符指定列
awk -F',' '{print $1, $2}' file
# 打印行数
awk '{print NR, $0}' file
# 打印行数满足条件的行
awk '/pattern/ {print NR, $0}' file
# 计算列的总和
awk '{sum += $1} END {print sum}' file
# 打印最大值
awk 'max &lt; $1 {max = $1} END {print max}' file
# 格式化输出
awk '{printf "%-10s %-10s\n", $1, $2}' file</code></pre>
<h1>grep</h1>
<pre class="language-bash"><code># 显示匹配内容以及后面的5行内容  
grep -A 5 
# 显示匹配内容以及前面的5行内容
grep -B 5
# 显示匹配内容以及前后面的5行内容 
grep -C 5</code></pre>
<h1>vim</h1>
<pre class="language-bash"><code># 显示行号
:set nu
# 不显示行号
:set nonu
# 搜索高亮显示
:set hlsearch
# 搜索不高亮显示
:set nohlsearch</code></pre>
<h2>Service</h2>
<pre class="language-bash"><code>vim /etc/systemd/system/nacos.service
# 以下为文件内容，注意 Type 值：如果服务启动时命令不结束一直有输出，则需要用 simple ；如果服务启动时命令立即结束则用 forking
[Unit]
Description=My Nacos
After=network.target
 
[Service]
Type=forking
Environment="JAVA_HOME=/data/devops/install/jdk-11.0.23"
Environment="PATH=/usr/local/openssl/bin:/data/devops/install/jdk-11.0.23/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin:/data/devops/install/rocketmq/bin:/root/bin:/usr/local/nginx/sbin"
ExecStart=sh /data/devops/install/nacos/bin/start-nacos-standalone.sh
ExecStop=sh /data/devops/install/nacos/bin/shutdown.sh

[Install]
WantedBy=multi-user.target</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>GaussDB</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/gaussdb.html"/>
        <id>https://lhplj.github.io/gaussdb.html</id>

        <updated>2024-08-23T11:00:38+08:00</updated>
            <summary>
                <![CDATA[
                    -- 查询表信息 select * from pg_tables; -- 查询 schema 下的表信息 select * from pg_tables where schemaname = 'schemaname'; -- 查询表定义 select * from pg_get_tabledef('schema.tablename');
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-sql"><code>-- 查询表信息
select * from pg_tables;
-- 查询 schema 下的表信息
select * from pg_tables where schemaname = 'schemaname';
-- 查询表定义
select * from pg_get_tabledef('schema.tablename');</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>logrotate</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/logrorate.html"/>
        <id>https://lhplj.github.io/logrorate.html</id>

        <updated>2024-07-23T14:50:14+08:00</updated>
            <summary>
                <![CDATA[
                    linux自带的日志文件管理工具 # 主配置文件,通过 include /etc/logrotate.d 加载目录下的所有日志管理脚本 /etc/logrotate.conf # 日志管理脚本目录 /etc/logrotate.d/ # 以 nginx 日志切割与归档为例 # 以下为 /etc/logrotate.d/nginx 的内容 /home/devops/install/nginx/logs/*log { create 0664 root root daily dateext rotate 180 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript } # create&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>linux自带的日志文件管理工具</p>
<pre class="language-bash"><code># 主配置文件,通过 include /etc/logrotate.d 加载目录下的所有日志管理脚本
/etc/logrotate.conf
# 日志管理脚本目录
/etc/logrotate.d/

# 以 nginx 日志切割与归档为例
# 以下为 /etc/logrotate.d/nginx 的内容
/home/devops/install/nginx/logs/*log {
    create 0664 root root
    daily
    dateext
    rotate 180
    missingok
    notifempty
    compress
    sharedscripts
    postrotate
        /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true
    endscript
}

# create 以指定权限创建新的日志文件
# daily 处理频率 daily 每天 monthly 每月 weekly 每周 yearly 每年
# dateext 使用日期格式作为命名格式
# rorate 180 最多存储 180 个归档日志,超出后删除时间最久的
# missingok 忽略错误
# notifempy 忽略空日志文件的处理
# compress 归档后进行压缩
# sharedscripts postrorate endscript 通常一起出现
# /bin/kill -USR1 pid 是给 pid 对应的nginx 进程发送 USR1 信号，nginx收到此信号后会：重开日志文件（关闭当前的日志文件描述符、重新打开配置文件中指定的日志文件路径）；不中断服务、释放旧文件


# 强制进行一次切割与归档
/usr/sbin/logrotate -f /etc/logratate.d/nginx</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>VSCODE正则替换</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/vscodezheng-ze-ti-huan.html"/>
        <id>https://lhplj.github.io/vscodezheng-ze-ti-huan.html</id>

        <updated>2024-06-27T15:36:28+08:00</updated>
            <summary>
                <![CDATA[
                    小写转大写:如将下划线分隔的单词转驼峰 查找 _([a-z]) 替换 \U$1 \L 大写字母转小写 \U 小写字母转大写 $1 为正则匹配的第一项
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>小写转大写:如将下划线分隔的单词转驼峰</p>
<p>查找 _([a-z])</p>
<p>替换 \U$1</p>
<p>\L 大写字母转小写</p>
<p>\U 小写字母转大写</p>
<p>$1 为正则匹配的第一项</p>
            ]]>
        </content>
    </entry>
</feed>
