<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>lhplj</title>
    <link href="https://lhplj.github.io/feed.xml" rel="self" />
    <link href="https://lhplj.github.io" />
    <updated>2025-02-07T16:29:51+08:00</updated>
    <author>
        <name>lhplj</name>
    </author>
    <id>https://lhplj.github.io</id>

    <entry>
        <title>Java引用</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/javayin-yong.html"/>
        <id>https://lhplj.github.io/javayin-yong.html</id>

        <updated>2025-02-07T11:02:41+08:00</updated>
            <summary>
                <![CDATA[
                    强引用（默认支持模式java.lang.ref.Reference&lt;T&gt;） 软引用（java.lang.ref.SoftReference&lt;T&gt;） 弱引用（java.lang.ref.WeakReference&lt;T&gt;） 虚引用（java.lang.ref.PhantomReference&lt;T&gt;） Object.finalize() 当GC认为可以回收某对象时，GC会调用对象的此方法 当内存不足JVM开始垃圾回收，对于强引用对象，只要引用计数大于0就不会回收该对象。 SomeObject so = new SomeObject(); # 通过构造方法软引用一个对象 SoftReference&lt;SomeObject&gt; sf = new SoftReference(so); # 通过get方法获取引用对象 # 在内存充足时可以正常获取到引用䭴 # 在内存不足时将获取null，so会被GC机制回收 SomeObject ref = sf.get(); 弱引用 比软引用的生存期更短，只要进行GC无论JVM内存是否充足，弱引用对象都会被清理 # ThreadLocal 中的静态类 ThreadLocalMap 中的 静态类 Entry 继承了弱引用 static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ul>
<li>强引用（默认支持模式java.lang.ref.Reference&lt;T&gt;）</li>
<li>软引用（java.lang.ref.SoftReference&lt;T&gt;）</li>
<li>弱引用（java.lang.ref.WeakReference&lt;T&gt;）</li>
<li>虚引用（java.lang.ref.PhantomReference&lt;T&gt;）</li>
</ul>
<h2>Object.finalize()</h2>
<p>当GC认为可以回收某对象时，GC会调用对象的此方法</p>
<h2>强引用</h2>
<p>当内存不足JVM开始垃圾回收，对于强引用对象，只要引用计数大于0就不会回收该对象。</p>
<h2>软引用</h2>
<ul>
<li>当系统内存充足时软引用对象不会被回收</li>
<li>当系统内存不足时软引用对象会被回收</li>
</ul>
<pre class="language-java"><code>SomeObject so = new SomeObject();
# 通过构造方法软引用一个对象
SoftReference&lt;SomeObject&gt; sf = new SoftReference(so);
# 通过get方法获取引用对象
# 在内存充足时可以正常获取到引用䭴
# 在内存不足时将获取null，so会被GC机制回收
SomeObject ref = sf.get();</code></pre>
<h2>弱引用</h2>
<p>比软引用的生存期更短，只要进行GC无论JVM内存是否充足，弱引用对象都会被清理</p>
<pre class="language-java"><code># ThreadLocal 中的静态类 ThreadLocalMap 中的 静态类 Entry 继承了弱引用
static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; {
    /** The value associated with this ThreadLocal. */
    Object value;

    Entry(ThreadLocal&lt;?&gt; k, Object v) {
        super(k);
        value = v;
    }
}</code></pre>
<h3>ThreadLocal.ThreadLocalMap.Entry为什么要用弱引用</h3>
<p>因为它在TheadLocal内部，本身引用的对象又是ThreadLocal，也就是说在内部引用自己，如果使用强引用，那ThreadLocal对象将永远无法被回收。</p>
<p>由于是弱引用，所以ThreadLocal对象会在GC后被回收，引用它的变量将成为null，所以它的 set / get 方法会在内部判断引用对象是否为 null ，如果是，将会自动清理保存的数据，以释放内存。</p>
<h2>虚引用</h2>
<p>在任何时间都可能被回收</p>
<ol>
<li>虚引用必须与引用队列（java.lang.ref.ReferenceQueue&lt;T&gt;）联合使用。<span style="color: #e03e2d;"><strong>虚引用对象被回收后，会被加入到 ReferenceQueue 中</strong></span></li>
<li>虚引用的get方法总是返回null：虚引用的主要作用是跟踪对象被垃圾回收的状态。仅仅是提供了一种确保对象被 finalize 以后，做某些事情的通知机制。</li>
<li>处理监控通知使用：换句话说，设置虚引用关联对象的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步的处理，用来实现 比finalize 机制更灵活的回收操作。</li>
</ol>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Spring+Nacos加载配置流程</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html"/>
        <id>https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html</id>

        <updated>2024-10-24T08:54:29+08:00</updated>
            <summary>
                <![CDATA[
                    org.springframework.boot.SpringApplication public ConfigurableApplicationContext run(String... args) { ... ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); ... } private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments) { ... listeners.environmentPrepared(environment); .. } org.springframework.boot.SpringApplicationRunListeners void environmentPrepared(ConfigurableEnvironment environment) { for (SpringApplicationRunListener listener : this.listeners) { listener.environmentPrepared(environment); } } org.springframework.boot.SpringApplicationRunListener default void environmentPrepared(ConfigurableEnvironment environment) {}&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <ol>
<li>org.springframework.boot.SpringApplication
<pre class="language-java"><code>public ConfigurableApplicationContext run(String... args) {
    ...
    ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);
    ...
}

private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,
        ApplicationArguments applicationArguments) {
    ...
    listeners.environmentPrepared(environment);
    ..
}</code></pre>
</li>
<li>org.springframework.boot.SpringApplicationRunListeners
<pre class="language-java"><code>void environmentPrepared(ConfigurableEnvironment environment) {
    for (SpringApplicationRunListener listener : this.listeners) {
        listener.environmentPrepared(environment);
    }
}</code></pre>
</li>
<li>org.springframework.boot.SpringApplicationRunListener
<pre class="language-java"><code>default void environmentPrepared(ConfigurableEnvironment environment) {}</code></pre>
</li>
<li>org.springframework.boot.context.event.EventPublishingRunListener
<pre class="language-java"><code>@Override
public void environmentPrepared(ConfigurableEnvironment environment) {
    this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(this.application, this.args, environment));
}</code></pre>
</li>
<li>org.springframework.context.event.SimpleApplicationEventMulticaster
<pre class="language-java"><code>@Override
public void multicastEvent(ApplicationEvent event) {
	multicastEvent(event, resolveDefaultEventType(event));
}

@Override
public void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) {
	...
	invokeListener(listener, event);
	...
}

/**
 * Invoke the given listener with the given event.
 * @param listener the ApplicationListener to invoke
 * @param event the current event to propagate
 * @since 4.1
 */
protected void invokeListener(ApplicationListener&lt;?&gt; listener, ApplicationEvent event) {
	...
	doInvokeListener(listener, event);
	...
}

@SuppressWarnings({"rawtypes", "unchecked"})
private void doInvokeListener(ApplicationListener listener, ApplicationEvent event) {
	...
	listener.onApplicationEvent(event);
	...
}</code></pre>
</li>
<li>org.springframework.cloud.bootstrap.BootstrapApplicationListener
<pre class="language-java"><code>@Override
public void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {
   ...
}</code></pre>
</li>
</ol>
<p>以上是SpringBoot启动时加载Spring自身相关Environment的主要流程,之后通过<span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">ApplicationEnvironmentPreparedEvent事件监听器加载所有的</span></p>
<div>
<div>
<div>ApplicationContextInitializer来保存Environment.接下来就可以对Environment进行扩展/调整/覆盖等一系列操作.</div>
</div>
</div>
<ol style="list-style-type: lower-roman;">
<li>org.springframework.cloud.bootstrap.BootstrapImportSelectorConfiguration</li>
<li>org.springframework.cloud.bootstrap.BootstrapImportSelector</li>
<li>org.springframework.cloud.bootstrap.BootstrapConfiguration
<ol style="list-style-type: lower-alpha;">
<li>spring-cloud-context.jar/META-INF/spring.factories  PropertySourceBootstrapConfiguration</li>
<li>spring-cloud-starter-alibaba-nacos-config.jar/META-INF/spring.factories -&gt; NacosConfigBootstrapConfiguration -&gt; NacosPropertySourceLocator</li>
</ol>
</li>
<li>org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration<br>会加载所有PropertySourceLocator并执行locateCollection方法,进而执行locate方法.当然就包括下边的NacosPropertySourceLocator</li>
<li>com.alibaba.cloud.nacos.client.NacosPropertySourceLocator<br>主要依赖com.alibaba.cloud.nacos.NacosConfigManager中的com.alibaba.nacos.api.config.ConfigService构造出com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder</li>
<li>com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder
<pre class="language-java"><code>/*
 * Copyright 2013-2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.alibaba.cloud.nacos.client;

import java.util.Collections;
import java.util.Date;
import java.util.List;

import com.alibaba.cloud.nacos.NacosPropertySourceRepository;
import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
import com.alibaba.nacos.api.config.ConfigService;
import com.alibaba.nacos.api.exception.NacosException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.core.env.PropertySource;
import org.springframework.util.StringUtils;

/**
 * @author xiaojing
 * @author pbting
 */
public class NacosPropertySourceBuilder {

	private static final Logger log = LoggerFactory
			.getLogger(NacosPropertySourceBuilder.class);

	private ConfigService configService;

	private long timeout;

	public NacosPropertySourceBuilder(ConfigService configService, long timeout) {
		this.configService = configService;
		this.timeout = timeout;
	}

	public long getTimeout() {
		return timeout;
	}

	public void setTimeout(long timeout) {
		this.timeout = timeout;
	}

	public ConfigService getConfigService() {
		return configService;
	}

	public void setConfigService(ConfigService configService) {
		this.configService = configService;
	}

	/**
	 * @param dataId Nacos dataId
	 * @param group Nacos group
	 */
	NacosPropertySource build(String dataId, String group, String fileExtension,
			boolean isRefreshable) {
		List&lt;PropertySource&lt;?&gt;&gt; propertySources = loadNacosData(dataId, group,
				fileExtension);
		NacosPropertySource nacosPropertySource = new NacosPropertySource(propertySources,
				group, dataId, new Date(), isRefreshable);
		NacosPropertySourceRepository.collectNacosPropertySource(nacosPropertySource);
		return nacosPropertySource;
	}

	private List&lt;PropertySource&lt;?&gt;&gt; loadNacosData(String dataId, String group,
			String fileExtension) {
		String data = null;
		try {
			data = configService.getConfig(dataId, group, timeout);
			if (StringUtils.isEmpty(data)) {
				log.warn(
						"Ignore the empty nacos configuration and get it based on dataId[{}] &amp; group[{}]",
						dataId, group);
				return Collections.emptyList();
			}
			if (log.isDebugEnabled()) {
				log.debug(String.format(
						"Loading nacos data, dataId: '%s', group: '%s', data: %s", dataId,
						group, data));
			}
			return NacosDataParserHandler.getInstance().parseNacosData(dataId, data,
					fileExtension);
		}
		catch (NacosException e) {
			log.error("get data from Nacos error,dataId:{} ", dataId, e);
		}
		catch (Exception e) {
			log.error("parse data from Nacos error,dataId:{},data:{}", dataId, data, e);
		}
		return Collections.emptyList();
	}

}
</code></pre>
</li>
</ol>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Java-Case0</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/java.html"/>
        <id>https://lhplj.github.io/java.html</id>

        <updated>2024-08-27T14:48:45+08:00</updated>
            <summary>
                <![CDATA[
                    public class Test { public static void main(String[] args) { Father f = new Son(); System.out.println(f.x); System.out.println(((Son)f).x); f.print(); } } class Father { int x = 10; public Father() { System.out.println(&quot;Construct Father.x = &quot; + x); print(); x = 20; System.out.println(&quot;Construct Father.x = &quot; +&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre><code class="language-java">public class Test {

    public static void main(String[] args) {
        Father f = new Son();
        System.out.println(f.x);
        System.out.println(((Son)f).x);
        f.print();
    }

}

class Father {
    int x = 10;

    public Father() {
        System.out.println(&quot;Construct Father.x = &quot; + x);
        print();
        x = 20;
        System.out.println(&quot;Construct Father.x = &quot; + x);
    }

    public void print() {
        System.out.println(&quot;print Father.x = &quot; + x);
    }
}

class Son extends Father {
    int x = 30;

    public Son() {
        System.out.println(&quot;Construct Son.x = &quot; + x);
        print();
                super.print();
        x = 40;
        System.out.println(&quot;Construct Son.x = &quot; + x);
    }

    @Override
    public void print() {
        System.out.println(&quot;print Son.x = &quot; + x);
    }
}
</code></pre>
<pre><code>输出结果:
Construct Father.x = 10
print Son.x = 0
Construct Father.x = 20
Construct Son.x = 30
print Son.x = 30
print Father.x = 20
Construct Son.x = 40
20
40
print Son.x = 40
</code></pre>
<ul>
<li>子类实例化时会先实例化父类,因为会先执行父类的构造方法</li>
<li>子类重写了父类的print方法,所以父类构造方法中的print会执行子类的print,但此时子类尚未完成实例化,属性未初始化,所以为0</li>
<li>属性的取值取决于所属类,而非对象</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>JVM</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/jvm.html"/>
        <id>https://lhplj.github.io/jvm.html</id>

        <updated>2024-08-27T10:42:08+08:00</updated>
            <summary>
                <![CDATA[
                    内存参数 -Xms 堆内存初始大小(等同于 -XX:InitialHeapSize ) -Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize ) -Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置) -Xss 线程栈大小 -XX:NewSize 初始新生代大小 -XX:MaxNewSize 最大新生代大小 -XX:InitialHeapSize 初始堆大小 -XX:MaxHeapSize 最大堆大小 -XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置 -XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置 -XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1 -XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15（最大也是15）。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。 -XX:TargetSurvivorRatio&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="内存参数">内存参数</h3>
<pre><code>-Xms 堆内存初始大小(等同于 -XX:InitialHeapSize )
-Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize )
-Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置)
-Xss 线程栈大小
-XX:NewSize 初始新生代大小
-XX:MaxNewSize 最大新生代大小
-XX:InitialHeapSize 初始堆大小
-XX:MaxHeapSize 最大堆大小
-XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置
-XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置
-XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1
-XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15（最大也是15）。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。
-XX:TargetSurvivorRatio 设定survivor区的目标使用率。默认50，即survivor区对象目标使用率为50%。

-XX:+HeapDumpOnOutOfMemoryError 内存溢出时输出堆内存文件
-XX:HeapDumpPath=/path/to/heap.hprof 堆内存文件路径
</code></pre>
<p>一般-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 设置一样的大小, -Xms 和 -Xmx 设置一样的大小，这意味着堆内存的大小在整个程序运行期间不会发生变化,
这种配置有几个影响：</p><ol>
<li>减少垃圾回收的频率：当堆的大小固定时，垃圾回收（GC）可以更容易地进行优化，因为它只需要处理固定大小的内存。如果堆大小变动，JVM 需要管理堆的调整，这可能会影响 GC 的效率。</li>
<li>避免动态调整带来的性能损失：固定堆大小可以避免在运行过程中动态调整堆内存大小带来的性能开销。这通常会减少垃圾回收时的停顿时间，因为堆的大小不会因应用负载的变化而波动。</li>
<li>潜在的内存不足问题：如果应用程序的内存需求超出了设置的 -Xmx 值，那么固定堆大小并不能防止 OutOfMemoryError 错误。你需要确保 -Xmx 设置的值足够大，以满足应用程序的内存需求。</li>
<li>GC 调优：虽然固定堆大小可以减少 GC 的频率和复杂性，但 GC 的具体行为还取决于所使用的 GC 算法和其他 JVM 参数。你可能仍然需要根据应用程序的需求进行 GC 参数的调优。
总结来说，将 -Xms 和 -Xmx 设置为相同的值可以帮助减少由于堆内存调整引起的性能问题，但并不能完全避免垃圾回收。GC 的发生仍然取决于应用程序的内存使用模式和所选择的垃圾回收算法。</li>
</ol>
<h3 id="gc参数">GC参数</h3>
<pre><code>-XX:+PrintGCDetails 输出详细的 GC 信息。
-XX:+PrintGCDateStamps 在 GC 日志中添加时间戳。
-XX:+UseGCLogFileRotation GC日志分割
-Xloggc:/path/to/gc.log 指定 GC 日志文件的路径。
-XX:+UseG1GC 使用 G1 垃圾回收器。
-XX:+UseParallelGC 使用并行垃圾回收器。
-XX:+UseConcMarkSweepGC 使用 CMS 垃圾回收器（注意，CMS 从 JDK 14 开始已被弃用）。
</code></pre>
<h4 id="full-gc">Full GC</h4>
<p>Full GC是指对整个堆内存（包括新生代和老年代）以及元空间进行垃圾回收的过程。Full GC通常比Minor GC（只针对新生代进行垃圾回收）要耗时更长，并且会导致所有用户线程暂停（Stop The World），因此应该尽量避免或减少Full GC的发生。
一般情况下，只需要看Full GC的总次数和执行的间隔时间。一般Full GC间隔时间在13分钟以上，都属于正常的。一旦低于1分钟，就说明堆栈内存严重不足，需要调整了.</p><h4 id="注意事项">注意事项</h4>
<ul>
<li>确保指定的日志文件路径对 JVM 进程有写权限。</li>
<li>GC 日志文件可能会很大，所以需要定期检查和管理这些文件。
启用 GC 日志后，你可以分析 GC 活动，以了解内存使用情况和性能瓶颈。可以使用一些工具来分析这些日志，比如 GCViewer 或 GCEasy。</li>
</ul>
<h3 id="查看jvm参数">查看JVM参数</h3>
<pre><code># 通过jps 查验java 进程及pid
jps -l
# jinfo pid 可以查看JVM进程所有的属性设置和配置参数(63936 为进程ID)
jinfo 63936
# 通过jmap查看 JVM 的堆的配置信息(63936 为进程ID)
jmap -heap 63936
</code></pre>
<h3 id="jvm内存结构">JVM内存结构</h3>
<ul>
<li>Heap(-Xms -Xmx)(Full GC)<ul>
<li>Young新生代(-Xmn 默认Heap的1/3 )(Minor GC)<ul>
<li>Eden伊甸园区(默认Young的8/10)</li>
<li>Survivor0(From)幸存者0区(默认Young的1/10)</li>
<li>Survivor1(To)幸存者1区(默认Young的1/10)</li>
</ul>
</li>
<li>Old老年代(默认Heap的2/3)(Major GC)</li>
</ul>
</li>
<li>Perm(JDK7永久区 -XX:PermSize JDK8元空间)<ul>
<li>JDK7永久区(-XX:PermSize -XX:MaxPermSize)</li>
<li>JDK8元空间(-XX:MetaspaceSize -XX:MaxMetaspaceSize)</li>
</ul>
</li>
</ul>
<h3 id="gc算法">GC算法</h3>
<ul>
<li>引用计数<br>  对于互相引用的情况无法进行内存清理</li>
<li>内存复制<br>  新生代 Eden 区到 Survivor 区用的是内存复制.From与To空间一样,且身份不固定,每次必有一个是空的,GC时谁空谁就是To,直接把From及Eden中未回收的放到To中,之后角色互换.
  每经历一次YGC幸存者年龄加1,年龄达到15后,会被移到Old区<ul>
<li>优点:内存连续</li>
<li>缺点:耗费内存</li>
</ul>
</li>
<li>标记清除<br>  老年代使用的算法.<ul>
<li>优点:节约内存</li>
<li>缺点:存在内存碎片</li>
</ul>
</li>
<li>标记覆盖<br>  老年代使用的算法.</li>
</ul>
<h3 id="对象在堆内存中的存储布局">对象在堆内存中的存储布局</h3>
<ul>
<li>对象头<ul>
<li>Mark Word（64位系统中占8字节）<ul>
<li>hash code</li>
<li>GC标记</li>
<li>GC次数</li>
<li>同步锁标记</li>
<li>偏向锁持有者</li>
</ul>
</li>
<li>Class Pointer（64位系统中占8字节）</li>
<li>Length (数组特有，一般对象无）</li>
</ul>
</li>
<li>实例数据</li>
<li>对齐填充（保证8个字节的倍数）</li>
</ul>
<figure class="post__image"><img loading="lazy" src="https://lhplj.github.io/media/posts/11/java-object-mark-word-2.png" alt="Mark Word" width="2234" height="700"  sizes="100vw" srcset="https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-xs.png 300w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-sm.png 480w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-md.png 768w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-lg.png 1024w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-xl.png 1360w ,https://lhplj.github.io/media/posts/11/responsive/java-object-mark-word-2-2xl.png 1600w"></figure>
            ]]>
        </content>
    </entry>
    <entry>
        <title>linux常用命令</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/top.html"/>
        <id>https://lhplj.github.io/top.html</id>

        <updated>2024-08-27T10:36:20+08:00</updated>
            <summary>
                <![CDATA[
                    top 显示 swap 执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小 top -o &lt;列名&gt; # 按SWSP排序 top -o SWAP # 按CPU使用率排序 top -o %CPU lsof # lsof -i:端口号 查询端口号是否被占用 lsof -i:26379 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME redis-ser 24071 root 6u IPv4 125225 0t0 TCP *:26379 (LISTEN) pwdx #&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1>top</h1>
<h2>显示 swap </h2>
<p>执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小</p>
<h2>排序</h2>
<pre class="language-bash"><code>top -o &lt;列名&gt;
# 按SWSP排序
top -o SWAP
# 按CPU使用率排序
top -o %CPU</code></pre>
<h1>lsof</h1>
<pre class="language-bash"><code># lsof -i:端口号 查询端口号是否被占用
lsof -i:26379
COMMAND      PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME
redis-ser  24071 root    6u  IPv4    125225      0t0  TCP *:26379 (LISTEN)
</code></pre>
<h1>pwdx</h1>
<pre class="language-bash"><code># pwdx pid 查看进程启动时的工作目录
pwdx 24071
24071: /home/devops/install/redis-cluster/redis_26379</code></pre>
<h1>ps</h1>
<pre class="language-bash"><code># 查看进程的运行时间
# 例如 10-01:23:45 表示进程已运行了 10 天、1 小时、23 分钟和 45 秒。
ps -p &lt;PID&gt; -o etime</code></pre>
<h1>zip</h1>
<pre class="language-bash"><code># name 为生成的压缩包的名称
# q 静默
# r 递归子目录
zip -qr name.zip ./*

# 对于jar包解压后再压缩，要增加选项0，否则会对依赖jar进行压缩，这样java将无法正常解析
# 0 只存储不压缩
zip -qr0 name.zip ./*</code></pre>
<h1><a href="https://www.runoob.com/linux/linux-comm-awk.html" title="awk" target="_blank" rel="noopener noreferrer">awk</a></h1>
<pre class="language-bash"><code>awk options 'pattern {action}' file
# options
# -F &lt;分隔符&gt; 或 --field-separator=&lt;分割符&gt; 默认空格，可以指定多个，如 awk -F '[ ,]' 先使用空格分割，再使用逗号分割
# -v &lt;变量名&gt;=&lt;值&gt; 设置awk内部的变量，可以使用该选项将外部值传递给awk脚本中的变量
# -f &lt;脚本文件&gt;
# -V 或 --version
# -h 或 --help

# 打印整行
awk {print} file
# 查看日志文件中包含指定关键字，且第9项数值大于1000的行打印出来
cat gateservice-info.log | grep "Controller.p" | awk '$9&gt;1000 {print $0}'
# 打印特定列
awk '{print $1, $2}' file
# 使用分隔符指定列
awk -F',' '{print $1, $2}' file
# 打印行数
awk '{print NR, $0}' file
# 打印行数满足条件的行
awk '/pattern/ {print NR, $0}' file
# 计算列的总和
awk '{sum += $1} END {print sum}' file
# 打印最大值
awk 'max &lt; $1 {max = $1} END {print max}' file
# 格式化输出
awk '{printf "%-10s %-10s\n", $1, $2}' file</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>GaussDB</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/gaussdb.html"/>
        <id>https://lhplj.github.io/gaussdb.html</id>

        <updated>2024-08-23T11:00:38+08:00</updated>
            <summary>
                <![CDATA[
                    -- 查询表信息 select * from pg_tables; -- 查询 schema 下的表信息 select * from pg_tables where schemaname = 'schemaname'; -- 查询表定义 select * from pg_get_tabledef('schema.tablename');
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-sql"><code>-- 查询表信息
select * from pg_tables;
-- 查询 schema 下的表信息
select * from pg_tables where schemaname = 'schemaname';
-- 查询表定义
select * from pg_get_tabledef('schema.tablename');</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>logrorate</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/logrorate.html"/>
        <id>https://lhplj.github.io/logrorate.html</id>

        <updated>2024-07-23T14:50:14+08:00</updated>
            <summary>
                <![CDATA[
                    linux自带的日志文件管理工具 # 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本 /etc/logrorate.conf # 日志管理脚本目录 /etc/logrorate.d/ # 以 nginx 日志切割与归档为例 # 以下为 /etc/logrorate.d/nginx 的内容 /home/devops/install/nginx/logs/*log { create 0664 root root daily dateext rotate 180 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript } # create&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>linux自带的日志文件管理工具</p>
<pre class="language-bash"><code># 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本
/etc/logrorate.conf
# 日志管理脚本目录
/etc/logrorate.d/

# 以 nginx 日志切割与归档为例
# 以下为 /etc/logrorate.d/nginx 的内容
/home/devops/install/nginx/logs/*log {
    create 0664 root root
    daily
    dateext
    rotate 180
    missingok
    notifempty
    compress
    sharedscripts
    postrotate
        /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true
    endscript
}

# create 以指定权限创建新的日志文件
# daily 处理频率 daily 每天 monthly 每月 weekly 每周 yearly 每年
# dateext 使用日期格式作为命名格式
# rorate 180 最多存储 180 个归档日志,超出后删除时间最久的
# missingok 忽略错误
# notifempy 忽略空日志文件的处理
# compress 归档后进行压缩
# sharedscripts postrorate endscript 通常一起出现


# 强制进行一次切割与归档
/usr/sbin/logrotate -f /etc/logratate.d/nginx</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>VSCODE正则替换</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/vscodezheng-ze-ti-huan.html"/>
        <id>https://lhplj.github.io/vscodezheng-ze-ti-huan.html</id>

        <updated>2024-06-27T15:36:28+08:00</updated>
            <summary>
                <![CDATA[
                    小写转大写:如将下划线分隔的单词转驼峰 查找 _([a-z]) 替换 \U$1 \L 大写字母转小写 \U 小写字母转大写 $1 为正则匹配的第一项
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>小写转大写:如将下划线分隔的单词转驼峰</p>
<p>查找 _([a-z])</p>
<p>替换 \U$1</p>
<p>\L 大写字母转小写</p>
<p>\U 小写字母转大写</p>
<p>$1 为正则匹配的第一项</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>ReverseLinkedList</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/reverselinkedlist.html"/>
        <id>https://lhplj.github.io/reverselinkedlist.html</id>

        <updated>2024-05-20T09:00:01+08:00</updated>
            <summary>
                <![CDATA[
                    public class ReverseLinkedList { class Node&lt;T&gt; { private T value; private Node&lt;T&gt; next; } public static void main(String[] args) { ReverseLinkedList.Node&lt;Integer&gt; head = build(); print(head); print(reverse(head)); } private static Node&lt;Integer&gt; build() { ReverseLinkedList x = new ReverseLinkedList(); Node&lt;Integer&gt; head = x.new Node&lt;&gt;(); head.value = 0;&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <pre class="language-java"><code>public class ReverseLinkedList {

    class Node&lt;T&gt; {
        private T value;
        private Node&lt;T&gt; next;
    }

    public static void main(String[] args) {
        ReverseLinkedList.Node&lt;Integer&gt; head = build();
        print(head);
        print(reverse(head));
    }

    private static Node&lt;Integer&gt; build() {
        ReverseLinkedList x = new ReverseLinkedList();
        Node&lt;Integer&gt; head = x.new Node&lt;&gt;();
        head.value = 0;
        Node&lt;Integer&gt; cur = head;
        for (int i = 1; i &lt; 10; i++) {
            Node&lt;Integer&gt; next = x.new Node&lt;&gt;();
            next.value = i;
            cur.next = next;

            cur = next;
        }
        return head;
    }

    /**
     * 打印链表
     * @param head
     */
    private static void print(Node&lt;Integer&gt; head) {
        if (head == null) {
            return;
        }
        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
        list.add(head.value);
        Node&lt;Integer&gt; next = head.next;
        while (next != null) {
            list.add(next.value);
            next = next.next;
        }
        System.out.println(JSON.toJSONString(list));
    }

    /**
     * 反转后返回新head
     * @param head
     * @return
     */
    private static Node&lt;Integer&gt; reverse(Node&lt;Integer&gt; head) {
        Node&lt;Integer&gt; pre = null;
        Node&lt;Integer&gt; node = head;
        Node&lt;Integer&gt; next = head.next;
        while (next != null) {
            next = node.next;
            node.next = pre;

            pre = node;
            if (next == null) {
                break;
            }
            node = next;
        }
        return node;
    }

}
</code></pre>
            ]]>
        </content>
    </entry>
    <entry>
        <title>MergeSort</title>
        <author>
            <name>lhplj</name>
        </author>
        <link href="https://lhplj.github.io/mergesort.html"/>
        <id>https://lhplj.github.io/mergesort.html</id>

        <updated>2024-05-17T16:20:19+08:00</updated>
            <summary>
                <![CDATA[
                    归并排序时间复杂度O(N * logN) 优于冒泡/选择排序时间复杂度O(N^2) public class MergeSort { public static void main(String[] args) { int[] arr = {20, 24, 5, 17, 14, 25, 15, 52}; mergeSort1(arr); // mergeSort2(arr); } /** * 递归实现 */ private static void mergeSort1(int[] arr) { if (arr == null || arr.length&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>归并排序时间复杂度O(N * logN)</p>
<p>优于冒泡/选择排序时间复杂度O(N^2)</p>
<pre class="language-java"><code>public class MergeSort {
    public static void main(String[] args) {
        int[] arr = {20, 24, 5, 17, 14, 25, 15, 52};
        mergeSort1(arr);
        //        mergeSort2(arr);
    }

    /**
     * 递归实现
     */
    private static void mergeSort1(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        process(arr, 0, arr.length - 1);
    }

    private static void process(int[] arr, int l, int r) {
        if (l == r) {
            return;
        }
        // 将[l, r] 二分为 [l, m] 和 [m + 1, r]
        int m = l + (r - l &gt;&gt; 1);
        process(arr, l, m);
        process(arr, m + 1, r);
        merge(arr, l, m, r);
    }

    private static void merge(int[] arr, int l, int m, int r) {
        int[] help = new int[r - l + 1];
        // p1 指向[l,m]
        // p2 指向[m + 1, r]
        int i = 0, p1 = l, p2 = m + 1;
        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {
            // 比较左区间与右区间,直到某区间结束
            help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];
        }
        // 处理未结束的区间
        while (p1 &lt;= m) {
            help[i++] = arr[p1++];
        }
        while (p2 &lt;= r) {
            help[i++] = arr[p2++];
        }

        for (i = 0; i &lt; help.length; i++) {
            arr[l + i] = help[i];
        }
        System.out.println(JSON.toJSON(arr));
    }

    /**
     * 非递归实现
     */
    private static void mergeSort2(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        int mergeSize = 1;
        int maxMergeSize = (arr.length &gt;&gt; 1) + 1;
        while (mergeSize &lt;= maxMergeSize) {
            int l = 0;
            while (l &lt; arr.length) {
                int m = l + mergeSize - 1;
                if (m &gt;= arr.length) {
                    break;
                }
                int r = Math.min(m + mergeSize, arr.length - 1);
                merge(arr, l, m, r);
                l = r + 1;
            }
            mergeSize &lt;&lt;= 1;
        }
    }
}
</code></pre>
<p><strong>应用场景:查找数组中每个位置上,左侧或右侧所有比这个数大或小的问题.</strong></p>
<p><strong>数组小和</strong>:在一个数组中,一个数左边比它小的数的总和,叫数的小和,所有数的小和累加起来,叫数组的小和.(<strong>注意</strong>:由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的)</p>
<pre class="language-java"><code>public class SmallSum {
    public static void main(String[] args) {
        int[] arr = {1, 3, 4, 2, 5};
        // 1的左侧小于1的无
        // 3的左侧小于3的1
        // 4的左侧小于4的1,3
        // 2的左侧小于2的1
        // 5的左侧小于5的1,3,4,2
        // 小和为 16
        mergeSort1(arr);
    }

    /**
     * 递归实现
     */
    private static void mergeSort1(int[] arr) {
        if (arr == null || arr.length &lt; 2) {
            return;
        }
        int result = process(arr, 0, arr.length - 1);
        System.out.println(result);
    }

    private static int process(int[] arr, int l, int r) {
        if (l == r) {
            return 0;
        }
        int m = l + (r - l &gt;&gt; 1);
        return process(arr, l, m) + process(arr, m + 1, r) +
                merge(arr, l, m, r);
    }

    private static int merge(int[] arr, int l, int m, int r) {
        int result = 0;
        int[] help = new int[r - l + 1];
        int i = 0, p1 = l, p2 = m + 1;
        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {
            result += arr[p1] &lt; arr[p2] ? (r - p2 + 1) * arr[p1] : 0;
            // 由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的
            help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];
        }
        while (p1 &lt;= m) {
            help[i++] = arr[p1++];
        }
        while (p2 &lt;= r) {
            help[i++] = arr[p2++];
        }

        for (i = 0; i &lt; help.length; i++) {
            arr[l + i] = help[i];
        }
        System.out.println(JSON.toJSON(arr));
        return result;
    }

}</code></pre>
<p><strong>降序对</strong>:在一个数组中,一个数与右边每个比它小的数组成一个降序对,求数组的所有降序对.(<strong>注意</strong>:由于要统计右侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理左区间的)</p>
            ]]>
        </content>
    </entry>
</feed>
