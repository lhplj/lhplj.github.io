{
    "version": "https://jsonfeed.org/version/1",
    "title": "lhplj",
    "description": "",
    "home_page_url": "https://lhplj.github.io",
    "feed_url": "https://lhplj.github.io/feed.json",
    "user_comment": "",
    "author": {
        "name": "lhplj"
    },
    "items": [
        {
            "id": "https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html",
            "url": "https://lhplj.github.io/springnacosjia-zai-pei-zhi-liu-cheng.html",
            "title": "Spring+Nacos加载配置流程",
            "summary": "org.springframework.boot.SpringApplication public ConfigurableApplicationContext run(String... args) { ... ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments); ... } private ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners, ApplicationArguments applicationArguments) { ... listeners.environmentPrepared(environment); .. } org.springframework.boot.SpringApplicationRunListeners void environmentPrepared(ConfigurableEnvironment environment) { for (SpringApplicationRunListener listener : this.listeners) { listener.environmentPrepared(environment); } } org.springframework.boot.SpringApplicationRunListener default void environmentPrepared(ConfigurableEnvironment environment) {}&hellip;",
            "content_html": "<ol>\n<li>org.springframework.boot.SpringApplication\n<pre class=\"language-java\"><code>public ConfigurableApplicationContext run(String... args) {\n    ...\n    ConfigurableEnvironment environment = prepareEnvironment(listeners, applicationArguments);\n    ...\n}\n\nprivate ConfigurableEnvironment prepareEnvironment(SpringApplicationRunListeners listeners,\n        ApplicationArguments applicationArguments) {\n    ...\n    listeners.environmentPrepared(environment);\n    ..\n}</code></pre>\n</li>\n<li>org.springframework.boot.SpringApplicationRunListeners\n<pre class=\"language-java\"><code>void environmentPrepared(ConfigurableEnvironment environment) {\n    for (SpringApplicationRunListener listener : this.listeners) {\n        listener.environmentPrepared(environment);\n    }\n}</code></pre>\n</li>\n<li>org.springframework.boot.SpringApplicationRunListener\n<pre class=\"language-java\"><code>default void environmentPrepared(ConfigurableEnvironment environment) {}</code></pre>\n</li>\n<li>org.springframework.boot.context.event.EventPublishingRunListener\n<pre class=\"language-java\"><code>@Override\npublic void environmentPrepared(ConfigurableEnvironment environment) {\n    this.initialMulticaster.multicastEvent(new ApplicationEnvironmentPreparedEvent(this.application, this.args, environment));\n}</code></pre>\n</li>\n<li>org.springframework.context.event.SimpleApplicationEventMulticaster\n<pre class=\"language-java\"><code>@Override\npublic void multicastEvent(ApplicationEvent event) {\n\tmulticastEvent(event, resolveDefaultEventType(event));\n}\n\n@Override\npublic void multicastEvent(final ApplicationEvent event, @Nullable ResolvableType eventType) {\n\t...\n\tinvokeListener(listener, event);\n\t...\n}\n\n/**\n * Invoke the given listener with the given event.\n * @param listener the ApplicationListener to invoke\n * @param event the current event to propagate\n * @since 4.1\n */\nprotected void invokeListener(ApplicationListener&lt;?&gt; listener, ApplicationEvent event) {\n\t...\n\tdoInvokeListener(listener, event);\n\t...\n}\n\n@SuppressWarnings({\"rawtypes\", \"unchecked\"})\nprivate void doInvokeListener(ApplicationListener listener, ApplicationEvent event) {\n\t...\n\tlistener.onApplicationEvent(event);\n\t...\n}</code></pre>\n</li>\n<li>org.springframework.cloud.bootstrap.BootstrapApplicationListener\n<pre class=\"language-java\"><code>@Override\npublic void onApplicationEvent(ApplicationEnvironmentPreparedEvent event) {\n   ...\n}</code></pre>\n</li>\n</ol>\n<p>以上是SpringBoot启动时加载Spring自身相关Environment的主要流程,之后通过<span style=\"color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);\">ApplicationEnvironmentPreparedEvent事件监听器加载所有的</span></p>\n<div>\n<div>\n<div>ApplicationContextInitializer来保存Environment.接下来就可以对Environment进行扩展/调整/覆盖等一系列操作.</div>\n</div>\n</div>\n<ol style=\"list-style-type: lower-roman;\">\n<li>org.springframework.cloud.bootstrap.BootstrapImportSelectorConfiguration</li>\n<li>org.springframework.cloud.bootstrap.BootstrapImportSelector</li>\n<li>org.springframework.cloud.bootstrap.BootstrapConfiguration\n<ol style=\"list-style-type: lower-alpha;\">\n<li>spring-cloud-context.jar/META-INF/spring.factories  PropertySourceBootstrapConfiguration</li>\n<li>spring-cloud-starter-alibaba-nacos-config.jar/META-INF/spring.factories -&gt; NacosConfigBootstrapConfiguration -&gt; NacosPropertySourceLocator</li>\n</ol>\n</li>\n<li>org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration<br>会加载所有PropertySourceLocator并执行locateCollection方法,进而执行locate方法.当然就包括下边的NacosPropertySourceLocator</li>\n<li>com.alibaba.cloud.nacos.client.NacosPropertySourceLocator<br>主要依赖com.alibaba.cloud.nacos.NacosConfigManager中的com.alibaba.nacos.api.config.ConfigService构造出com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder</li>\n<li>com.alibaba.cloud.nacos.client.NacosPropertySourceBuilder\n<pre class=\"language-java\"><code>/*\n * Copyright 2013-2018 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.alibaba.cloud.nacos.client;\n\nimport java.util.Collections;\nimport java.util.Date;\nimport java.util.List;\n\nimport com.alibaba.cloud.nacos.NacosPropertySourceRepository;\nimport com.alibaba.cloud.nacos.parser.NacosDataParserHandler;\nimport com.alibaba.nacos.api.config.ConfigService;\nimport com.alibaba.nacos.api.exception.NacosException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.springframework.core.env.PropertySource;\nimport org.springframework.util.StringUtils;\n\n/**\n * @author xiaojing\n * @author pbting\n */\npublic class NacosPropertySourceBuilder {\n\n\tprivate static final Logger log = LoggerFactory\n\t\t\t.getLogger(NacosPropertySourceBuilder.class);\n\n\tprivate ConfigService configService;\n\n\tprivate long timeout;\n\n\tpublic NacosPropertySourceBuilder(ConfigService configService, long timeout) {\n\t\tthis.configService = configService;\n\t\tthis.timeout = timeout;\n\t}\n\n\tpublic long getTimeout() {\n\t\treturn timeout;\n\t}\n\n\tpublic void setTimeout(long timeout) {\n\t\tthis.timeout = timeout;\n\t}\n\n\tpublic ConfigService getConfigService() {\n\t\treturn configService;\n\t}\n\n\tpublic void setConfigService(ConfigService configService) {\n\t\tthis.configService = configService;\n\t}\n\n\t/**\n\t * @param dataId Nacos dataId\n\t * @param group Nacos group\n\t */\n\tNacosPropertySource build(String dataId, String group, String fileExtension,\n\t\t\tboolean isRefreshable) {\n\t\tList&lt;PropertySource&lt;?&gt;&gt; propertySources = loadNacosData(dataId, group,\n\t\t\t\tfileExtension);\n\t\tNacosPropertySource nacosPropertySource = new NacosPropertySource(propertySources,\n\t\t\t\tgroup, dataId, new Date(), isRefreshable);\n\t\tNacosPropertySourceRepository.collectNacosPropertySource(nacosPropertySource);\n\t\treturn nacosPropertySource;\n\t}\n\n\tprivate List&lt;PropertySource&lt;?&gt;&gt; loadNacosData(String dataId, String group,\n\t\t\tString fileExtension) {\n\t\tString data = null;\n\t\ttry {\n\t\t\tdata = configService.getConfig(dataId, group, timeout);\n\t\t\tif (StringUtils.isEmpty(data)) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t\t\"Ignore the empty nacos configuration and get it based on dataId[{}] &amp; group[{}]\",\n\t\t\t\t\t\tdataId, group);\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(String.format(\n\t\t\t\t\t\t\"Loading nacos data, dataId: '%s', group: '%s', data: %s\", dataId,\n\t\t\t\t\t\tgroup, data));\n\t\t\t}\n\t\t\treturn NacosDataParserHandler.getInstance().parseNacosData(dataId, data,\n\t\t\t\t\tfileExtension);\n\t\t}\n\t\tcatch (NacosException e) {\n\t\t\tlog.error(\"get data from Nacos error,dataId:{} \", dataId, e);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tlog.error(\"parse data from Nacos error,dataId:{},data:{}\", dataId, data, e);\n\t\t}\n\t\treturn Collections.emptyList();\n\t}\n\n}\n</code></pre>\n</li>\n</ol>\n<p> </p>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-10-24T08:54:29+08:00",
            "date_modified": "2024-10-24T09:39:24+08:00"
        },
        {
            "id": "https://lhplj.github.io/java.html",
            "url": "https://lhplj.github.io/java.html",
            "title": "Java-Case0",
            "summary": "public class Test { public static void main(String[] args) { Father f = new Son(); System.out.println(f.x); System.out.println(((Son)f).x); f.print(); } } class Father { int x = 10; public Father() { System.out.println(&quot;Construct Father.x = &quot; + x); print(); x = 20; System.out.println(&quot;Construct Father.x = &quot; +&hellip;",
            "content_html": "<pre><code class=\"language-java\">public class Test {\n\n    public static void main(String[] args) {\n        Father f = new Son();\n        System.out.println(f.x);\n        System.out.println(((Son)f).x);\n        f.print();\n    }\n\n}\n\nclass Father {\n    int x = 10;\n\n    public Father() {\n        System.out.println(&quot;Construct Father.x = &quot; + x);\n        print();\n        x = 20;\n        System.out.println(&quot;Construct Father.x = &quot; + x);\n    }\n\n    public void print() {\n        System.out.println(&quot;print Father.x = &quot; + x);\n    }\n}\n\nclass Son extends Father {\n    int x = 30;\n\n    public Son() {\n        System.out.println(&quot;Construct Son.x = &quot; + x);\n        print();\n                super.print();\n        x = 40;\n        System.out.println(&quot;Construct Son.x = &quot; + x);\n    }\n\n    @Override\n    public void print() {\n        System.out.println(&quot;print Son.x = &quot; + x);\n    }\n}\n</code></pre>\n<pre><code>输出结果:\nConstruct Father.x = 10\nprint Son.x = 0\nConstruct Father.x = 20\nConstruct Son.x = 30\nprint Son.x = 30\nprint Father.x = 20\nConstruct Son.x = 40\n20\n40\nprint Son.x = 40\n</code></pre>\n<ul>\n<li>子类实例化时会先实例化父类,因为会先执行父类的构造方法</li>\n<li>子类重写了父类的print方法,所以父类构造方法中的print会执行子类的print,但此时子类尚未完成实例化,属性未初始化,所以为0</li>\n<li>属性的取值取决于所属类,而非对象</li>\n</ul>\n",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-08-27T14:48:45+08:00",
            "date_modified": "2024-09-14T15:50:03+08:00"
        },
        {
            "id": "https://lhplj.github.io/jvm.html",
            "url": "https://lhplj.github.io/jvm.html",
            "title": "JVM",
            "summary": "内存参数 -Xms 堆内存初始大小(等同于 -XX:InitialHeapSize ) -Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize ) -Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置) -Xss 线程栈大小 -XX:NewSize 初始新生代大小 -XX:MaxNewSize 最大新生代大小 -XX:InitialHeapSize 初始堆大小 -XX:MaxHeapSize 最大堆大小 -XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置 -XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置 -XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1 -XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。 -XX:TargetSurvivorRatio&hellip;",
            "content_html": "<h3 id=\"内存参数\">内存参数</h3>\n<pre><code>-Xms 堆内存初始大小(等同于 -XX:InitialHeapSize )\n-Xmx 堆内存最大大小(等同于 -XX:MaxHeapSize )\n-Xmn 新生代大小,扣除新生代剩下的就是老年代大小(等同于 -XX:NewSize 及 -XX:MaxNewSize 会覆盖这两个的配置)\n-Xss 线程栈大小\n-XX:NewSize 初始新生代大小\n-XX:MaxNewSize 最大新生代大小\n-XX:InitialHeapSize 初始堆大小\n-XX:MaxHeapSize 最大堆大小\n-XX:MetaspaceSize 元空间（永久代）大小，jdk1.8 之前用 -XX:PermSize 设置\n-XX:MaxMetaspaceSize 元空间（永久代）最大大小，jdk8 之前用 -XX:MaxPermSize 设置\n-XX:SurvivorRatio 新生代 Eden 区和 Survivor 区的比例，默认为 8，即8:1:1\n-XX:MaxTenuringThreshold 晋升年龄最大阈值，默认15。在新生代中对象存活次数(经过YGC的次数)后仍然存活，就会晋升到老年代。每经过一次YGC，年龄加1，当survivor区的对象年龄达到TenuringThreshold时，表示该对象是长存活对象，就会直接晋升到老年代。\n-XX:TargetSurvivorRatio 设定survivor区的目标使用率。默认50，即survivor区对象目标使用率为50%。\n\n-XX:+HeapDumpOnOutOfMemoryError 内存溢出时输出堆内存文件\n-XX:HeapDumpPath=/path/to/heap.hprof 堆内存文件路径\n</code></pre>\n<p>一般-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize 设置一样的大小, -Xms 和 -Xmx 设置一样的大小，这意味着堆内存的大小在整个程序运行期间不会发生变化,\n这种配置有几个影响：</p><ol>\n<li>减少垃圾回收的频率：当堆的大小固定时，垃圾回收（GC）可以更容易地进行优化，因为它只需要处理固定大小的内存。如果堆大小变动，JVM 需要管理堆的调整，这可能会影响 GC 的效率。</li>\n<li>避免动态调整带来的性能损失：固定堆大小可以避免在运行过程中动态调整堆内存大小带来的性能开销。这通常会减少垃圾回收时的停顿时间，因为堆的大小不会因应用负载的变化而波动。</li>\n<li>潜在的内存不足问题：如果应用程序的内存需求超出了设置的 -Xmx 值，那么固定堆大小并不能防止 OutOfMemoryError 错误。你需要确保 -Xmx 设置的值足够大，以满足应用程序的内存需求。</li>\n<li>GC 调优：虽然固定堆大小可以减少 GC 的频率和复杂性，但 GC 的具体行为还取决于所使用的 GC 算法和其他 JVM 参数。你可能仍然需要根据应用程序的需求进行 GC 参数的调优。\n总结来说，将 -Xms 和 -Xmx 设置为相同的值可以帮助减少由于堆内存调整引起的性能问题，但并不能完全避免垃圾回收。GC 的发生仍然取决于应用程序的内存使用模式和所选择的垃圾回收算法。</li>\n</ol>\n<h3 id=\"gc参数\">GC参数</h3>\n<pre><code>-XX:+PrintGCDetails 输出详细的 GC 信息。\n-XX:+PrintGCDateStamps 在 GC 日志中添加时间戳。\n-XX:+UseGCLogFileRotation GC日志分割\n-Xloggc:/path/to/gc.log 指定 GC 日志文件的路径。\n-XX:+UseG1GC 使用 G1 垃圾回收器。\n-XX:+UseParallelGC 使用并行垃圾回收器。\n-XX:+UseConcMarkSweepGC 使用 CMS 垃圾回收器（注意，CMS 从 JDK 14 开始已被弃用）。\n</code></pre>\n<h4 id=\"full-gc\">Full GC</h4>\n<p>Full GC是指对整个堆内存（包括新生代和老年代）以及元空间进行垃圾回收的过程。Full GC通常比Minor GC（只针对新生代进行垃圾回收）要耗时更长，并且会导致所有用户线程暂停（Stop The World），因此应该尽量避免或减少Full GC的发生。\n一般情况下，只需要看Full GC的总次数和执行的间隔时间。一般Full GC间隔时间在13分钟以上，都属于正常的。一旦低于1分钟，就说明堆栈内存严重不足，需要调整了.</p><h4 id=\"注意事项\">注意事项</h4>\n<ul>\n<li>确保指定的日志文件路径对 JVM 进程有写权限。</li>\n<li>GC 日志文件可能会很大，所以需要定期检查和管理这些文件。\n启用 GC 日志后，你可以分析 GC 活动，以了解内存使用情况和性能瓶颈。可以使用一些工具来分析这些日志，比如 GCViewer 或 GCEasy。</li>\n</ul>\n<h3 id=\"查看jvm参数\">查看JVM参数</h3>\n<pre><code># 通过jps 查验java 进程及pid\njps -l\n# jinfo pid 可以查看JVM进程所有的属性设置和配置参数(63936 为进程ID)\njinfo 63936\n# 通过jmap查看 JVM 的堆的配置信息(63936 为进程ID)\njmap -heap 63936\n</code></pre>\n<h3 id=\"jvm内存结构\">JVM内存结构</h3>\n<ul>\n<li>Heap(-Xms -Xmx)(Full GC)<ul>\n<li>Young新生代(-Xmn 默认Heap的1/3 )(Minor GC)<ul>\n<li>Eden伊甸园区(默认Young的8/10)</li>\n<li>Survivor0(From)幸存者0区(默认Young的1/10)</li>\n<li>Survivor1(To)幸存者1区(默认Young的1/10)</li>\n</ul>\n</li>\n<li>Old老年代(默认Heap的2/3)(Major GC)</li>\n</ul>\n</li>\n<li>Perm(JDK7永久区 -XX:PermSize JDK8元空间)<ul>\n<li>JDK7永久区(-XX:PermSize -XX:MaxPermSize)</li>\n<li>JDK8元空间(-XX:MetaspaceSize -XX:MaxMetaspaceSize)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"gc算法\">GC算法</h3>\n<ul>\n<li>引用计数<br>  对于互相引用的情况无法进行内存清理</li>\n<li>内存复制<br>  新生代 Eden 区到 Survivor 区用的是内存复制.From与To空间一样,且身份不固定,每次必有一个是空的,GC时谁空谁就是To,直接把From及Eden中未回收的放到To中,之后角色互换.\n  每经历一次YGC幸存者年龄加1,年龄达到15后,会被移到Old区<ul>\n<li>优点:内存连续</li>\n<li>缺点:耗费内存</li>\n</ul>\n</li>\n<li>标记清除<br>  老年代使用的算法.<ul>\n<li>优点:节约内存</li>\n<li>缺点:存在内存碎片</li>\n</ul>\n</li>\n<li>标记覆盖<br>  老年代使用的算法.</li>\n</ul>\n",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-08-27T10:42:08+08:00",
            "date_modified": "2024-09-13T17:31:20+08:00"
        },
        {
            "id": "https://lhplj.github.io/top.html",
            "url": "https://lhplj.github.io/top.html",
            "title": "linux常用命令",
            "summary": "top 显示 swap 执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小 top -o &lt;列名&gt; # 按SWSP排序 top -o SWAP # 按CPU使用率排序 top -o %CPU lsof # lsof -i:端口号 查询端口号是否被占用 lsof -i:26379 COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAME redis-ser 24071 root 6u IPv4 125225 0t0 TCP *:26379 (LISTEN) pwdx #&hellip;",
            "content_html": "<h1>top</h1>\n<h2>显示 swap </h2>\n<p>执行top命令后,按f键会显示top列的编辑界面,上下键移动光标到SWAP项,空格选中后,ESC返回后即可在最后一列看到各进程占用的swap内存大小</p>\n<h2>排序</h2>\n<pre class=\"language-bash\"><code>top -o &lt;列名&gt;\n# 按SWSP排序\ntop -o SWAP\n# 按CPU使用率排序\ntop -o %CPU</code></pre>\n<h1>lsof</h1>\n<pre class=\"language-bash\"><code># lsof -i:端口号 查询端口号是否被占用\nlsof -i:26379\nCOMMAND      PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME\nredis-ser  24071 root    6u  IPv4    125225      0t0  TCP *:26379 (LISTEN)\n</code></pre>\n<h1>pwdx</h1>\n<pre class=\"language-bash\"><code># pwdx pid 查看进程启动时的工作目录\npwdx 24071\n24071: /home/devops/install/redis-cluster/redis_26379</code></pre>\n<h1>ps</h1>\n<pre class=\"language-bash\"><code># 查看进程的运行时间\n# 例如 10-01:23:45 表示进程已运行了 10 天、1 小时、23 分钟和 45 秒。\nps -p &lt;PID&gt; -o etime</code></pre>\n<h1>zip</h1>\n<pre class=\"language-bash\"><code># name 为生成的压缩包的名称\n# q 静默\n# r 递归子目录\nzip -qr name.zip ./*\n\n# 对于jar包解压后再压缩，要增加选项0，否则会对依赖jar进行压缩，这样java将无法正常解析\n# 0 只存储不压缩\nzip -qr0 name.zip ./*</code></pre>\n<p> </p>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-08-27T10:36:20+08:00",
            "date_modified": "2025-01-02T15:22:36+08:00"
        },
        {
            "id": "https://lhplj.github.io/gaussdb.html",
            "url": "https://lhplj.github.io/gaussdb.html",
            "title": "GaussDB",
            "summary": "-- 查询表信息 select * from pg_tables; -- 查询 schema 下的表信息 select * from pg_tables where schemaname = 'schemaname'; -- 查询表定义 select * from pg_get_tabledef('schema.tablename');",
            "content_html": "<pre class=\"language-sql\"><code>-- 查询表信息\nselect * from pg_tables;\n-- 查询 schema 下的表信息\nselect * from pg_tables where schemaname = 'schemaname';\n-- 查询表定义\nselect * from pg_get_tabledef('schema.tablename');</code></pre>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-08-23T11:00:38+08:00",
            "date_modified": "2024-08-23T11:00:38+08:00"
        },
        {
            "id": "https://lhplj.github.io/logrorate.html",
            "url": "https://lhplj.github.io/logrorate.html",
            "title": "logrorate",
            "summary": "linux自带的日志文件管理工具 # 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本 /etc/logrorate.conf # 日志管理脚本目录 /etc/logrorate.d/ # 以 nginx 日志切割与归档为例 # 以下为 /etc/logrorate.d/nginx 的内容 /home/devops/install/nginx/logs/*log { create 0664 root root daily dateext rotate 180 missingok notifempty compress sharedscripts postrotate /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true endscript } # create&hellip;",
            "content_html": "<p>linux自带的日志文件管理工具</p>\n<pre class=\"language-bash\"><code># 主配置文件,通过 include /etc/logrorate.d 加载目录下的所有日志管理脚本\n/etc/logrorate.conf\n# 日志管理脚本目录\n/etc/logrorate.d/\n\n# 以 nginx 日志切割与归档为例\n# 以下为 /etc/logrorate.d/nginx 的内容\n/home/devops/install/nginx/logs/*log {\n    create 0664 root root\n    daily\n    dateext\n    rotate 180\n    missingok\n    notifempty\n    compress\n    sharedscripts\n    postrotate\n        /bin/kill -USR1 `cat /home/devops/install/nginx/logs/nginx.pid 2&gt;/dev/null` 2&gt;/dev/null || true\n    endscript\n}\n\n# create 以指定权限创建新的日志文件\n# daily 处理频率 daily 每天 monthly 每月 weekly 每周 yearly 每年\n# dateext 使用日期格式作为命名格式\n# rorate 180 最多存储 180 个归档日志,超出后删除时间最久的\n# missingok 忽略错误\n# notifempy 忽略空日志文件的处理\n# compress 归档后进行压缩\n# sharedscripts postrorate endscript 通常一起出现\n\n\n# 强制进行一次切割与归档\n/usr/sbin/logrotate -f /etc/logratate.d/nginx</code></pre>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-07-23T14:50:14+08:00",
            "date_modified": "2024-07-26T10:30:31+08:00"
        },
        {
            "id": "https://lhplj.github.io/vscodezheng-ze-ti-huan.html",
            "url": "https://lhplj.github.io/vscodezheng-ze-ti-huan.html",
            "title": "VSCODE正则替换",
            "summary": "小写转大写:如将下划线分隔的单词转驼峰 查找 _([a-z]) 替换 \\U$1 \\L 大写字母转小写 \\U 小写字母转大写 $1 为正则匹配的第一项",
            "content_html": "<p>小写转大写:如将下划线分隔的单词转驼峰</p>\n<p>查找 _([a-z])</p>\n<p>替换 \\U$1</p>\n<p>\\L 大写字母转小写</p>\n<p>\\U 小写字母转大写</p>\n<p>$1 为正则匹配的第一项</p>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-06-27T15:36:28+08:00",
            "date_modified": "2024-06-27T15:39:10+08:00"
        },
        {
            "id": "https://lhplj.github.io/reverselinkedlist.html",
            "url": "https://lhplj.github.io/reverselinkedlist.html",
            "title": "ReverseLinkedList",
            "summary": "public class ReverseLinkedList { class Node&lt;T&gt; { private T value; private Node&lt;T&gt; next; } public static void main(String[] args) { ReverseLinkedList.Node&lt;Integer&gt; head = build(); print(head); print(reverse(head)); } private static Node&lt;Integer&gt; build() { ReverseLinkedList x = new ReverseLinkedList(); Node&lt;Integer&gt; head = x.new Node&lt;&gt;(); head.value = 0;&hellip;",
            "content_html": "<pre class=\"language-java\"><code>public class ReverseLinkedList {\n\n    class Node&lt;T&gt; {\n        private T value;\n        private Node&lt;T&gt; next;\n    }\n\n    public static void main(String[] args) {\n        ReverseLinkedList.Node&lt;Integer&gt; head = build();\n        print(head);\n        print(reverse(head));\n    }\n\n    private static Node&lt;Integer&gt; build() {\n        ReverseLinkedList x = new ReverseLinkedList();\n        Node&lt;Integer&gt; head = x.new Node&lt;&gt;();\n        head.value = 0;\n        Node&lt;Integer&gt; cur = head;\n        for (int i = 1; i &lt; 10; i++) {\n            Node&lt;Integer&gt; next = x.new Node&lt;&gt;();\n            next.value = i;\n            cur.next = next;\n\n            cur = next;\n        }\n        return head;\n    }\n\n    /**\n     * 打印链表\n     * @param head\n     */\n    private static void print(Node&lt;Integer&gt; head) {\n        if (head == null) {\n            return;\n        }\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        list.add(head.value);\n        Node&lt;Integer&gt; next = head.next;\n        while (next != null) {\n            list.add(next.value);\n            next = next.next;\n        }\n        System.out.println(JSON.toJSONString(list));\n    }\n\n    /**\n     * 反转后返回新head\n     * @param head\n     * @return\n     */\n    private static Node&lt;Integer&gt; reverse(Node&lt;Integer&gt; head) {\n        Node&lt;Integer&gt; pre = null;\n        Node&lt;Integer&gt; node = head;\n        Node&lt;Integer&gt; next = head.next;\n        while (next != null) {\n            next = node.next;\n            node.next = pre;\n\n            pre = node;\n            if (next == null) {\n                break;\n            }\n            node = next;\n        }\n        return node;\n    }\n\n}\n</code></pre>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-05-20T09:00:01+08:00",
            "date_modified": "2024-05-20T09:01:00+08:00"
        },
        {
            "id": "https://lhplj.github.io/mergesort.html",
            "url": "https://lhplj.github.io/mergesort.html",
            "title": "MergeSort",
            "summary": "归并排序时间复杂度O(N * logN) 优于冒泡/选择排序时间复杂度O(N^2) public class MergeSort { public static void main(String[] args) { int[] arr = {20, 24, 5, 17, 14, 25, 15, 52}; mergeSort1(arr); // mergeSort2(arr); } /** * 递归实现 */ private static void mergeSort1(int[] arr) { if (arr == null || arr.length&hellip;",
            "content_html": "<p>归并排序时间复杂度O(N * logN)</p>\n<p>优于冒泡/选择排序时间复杂度O(N^2)</p>\n<pre class=\"language-java\"><code>public class MergeSort {\n    public static void main(String[] args) {\n        int[] arr = {20, 24, 5, 17, 14, 25, 15, 52};\n        mergeSort1(arr);\n        //        mergeSort2(arr);\n    }\n\n    /**\n     * 递归实现\n     */\n    private static void mergeSort1(int[] arr) {\n        if (arr == null || arr.length &lt; 2) {\n            return;\n        }\n        process(arr, 0, arr.length - 1);\n    }\n\n    private static void process(int[] arr, int l, int r) {\n        if (l == r) {\n            return;\n        }\n        // 将[l, r] 二分为 [l, m] 和 [m + 1, r]\n        int m = l + (r - l &gt;&gt; 1);\n        process(arr, l, m);\n        process(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n\n    private static void merge(int[] arr, int l, int m, int r) {\n        int[] help = new int[r - l + 1];\n        // p1 指向[l,m]\n        // p2 指向[m + 1, r]\n        int i = 0, p1 = l, p2 = m + 1;\n        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {\n            // 比较左区间与右区间,直到某区间结束\n            help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++];\n        }\n        // 处理未结束的区间\n        while (p1 &lt;= m) {\n            help[i++] = arr[p1++];\n        }\n        while (p2 &lt;= r) {\n            help[i++] = arr[p2++];\n        }\n\n        for (i = 0; i &lt; help.length; i++) {\n            arr[l + i] = help[i];\n        }\n        System.out.println(JSON.toJSON(arr));\n    }\n\n    /**\n     * 非递归实现\n     */\n    private static void mergeSort2(int[] arr) {\n        if (arr == null || arr.length &lt; 2) {\n            return;\n        }\n        int mergeSize = 1;\n        int maxMergeSize = (arr.length &gt;&gt; 1) + 1;\n        while (mergeSize &lt;= maxMergeSize) {\n            int l = 0;\n            while (l &lt; arr.length) {\n                int m = l + mergeSize - 1;\n                if (m &gt;= arr.length) {\n                    break;\n                }\n                int r = Math.min(m + mergeSize, arr.length - 1);\n                merge(arr, l, m, r);\n                l = r + 1;\n            }\n            mergeSize &lt;&lt;= 1;\n        }\n    }\n}\n</code></pre>\n<p><strong>应用场景:查找数组中每个位置上,左侧或右侧所有比这个数大或小的问题.</strong></p>\n<p><strong>数组小和</strong>:在一个数组中,一个数左边比它小的数的总和,叫数的小和,所有数的小和累加起来,叫数组的小和.(<strong>注意</strong>:由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的)</p>\n<pre class=\"language-java\"><code>public class SmallSum {\n    public static void main(String[] args) {\n        int[] arr = {1, 3, 4, 2, 5};\n        // 1的左侧小于1的无\n        // 3的左侧小于3的1\n        // 4的左侧小于4的1,3\n        // 2的左侧小于2的1\n        // 5的左侧小于5的1,3,4,2\n        // 小和为 16\n        mergeSort1(arr);\n    }\n\n    /**\n     * 递归实现\n     */\n    private static void mergeSort1(int[] arr) {\n        if (arr == null || arr.length &lt; 2) {\n            return;\n        }\n        int result = process(arr, 0, arr.length - 1);\n        System.out.println(result);\n    }\n\n    private static int process(int[] arr, int l, int r) {\n        if (l == r) {\n            return 0;\n        }\n        int m = l + (r - l &gt;&gt; 1);\n        return process(arr, l, m) + process(arr, m + 1, r) +\n                merge(arr, l, m, r);\n    }\n\n    private static int merge(int[] arr, int l, int m, int r) {\n        int result = 0;\n        int[] help = new int[r - l + 1];\n        int i = 0, p1 = l, p2 = m + 1;\n        while (p1 &lt;= m &amp;&amp; p2 &lt;= r) {\n            result += arr[p1] &lt; arr[p2] ? (r - p2 + 1) * arr[p1] : 0;\n            // 由于要统计左侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理右区间的\n            help[i++] = arr[p1] &lt; arr[p2] ? arr[p1++] : arr[p2++];\n        }\n        while (p1 &lt;= m) {\n            help[i++] = arr[p1++];\n        }\n        while (p2 &lt;= r) {\n            help[i++] = arr[p2++];\n        }\n\n        for (i = 0; i &lt; help.length; i++) {\n            arr[l + i] = help[i];\n        }\n        System.out.println(JSON.toJSON(arr));\n        return result;\n    }\n\n}</code></pre>\n<p><strong>降序对</strong>:在一个数组中,一个数与右边每个比它小的数组成一个降序对,求数组的所有降序对.(<strong>注意</strong>:由于要统计右侧数据,所以在merge左右区间时,如果遇到相等的数,要先处理左区间的)</p>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-05-17T16:20:19+08:00",
            "date_modified": "2024-05-17T16:59:41+08:00"
        },
        {
            "id": "https://lhplj.github.io/mastergong-shi.html",
            "url": "https://lhplj.github.io/mastergong-shi.html",
            "title": "Master公式",
            "summary": "形如T(N) = a * T(N/b) + O(N^d) 其中a/b/d都是常数的递归函数,可以直接通过Master公式来确定时间复杂度 如果log(b,a) &lt; d 复杂度为 O(N^d) 如果log(b,a) &gt; d 复杂度为 O(N^Log(b,a)) 如果log(b,a) = d 复杂度为 O(N^d * logN)",
            "content_html": "<p>形如T(N) = a * T(N/b) + O(N^d) 其中a/b/d都是常数的递归函数,可以直接通过Master公式来确定时间复杂度</p>\n<ol>\n<li>如果log(b,a) &lt; d 复杂度为 O(N^d)</li>\n<li>如果log(b,a) &gt; d 复杂度为 O(N^Log(b,a))</li>\n<li>如果log(b,a) = d 复杂度为 O(N^d * logN)</li>\n</ol>",
            "author": {
                "name": "lhplj"
            },
            "tags": [
            ],
            "date_published": "2024-05-16T13:17:22+08:00",
            "date_modified": "2024-05-16T13:17:39+08:00"
        }
    ]
}
